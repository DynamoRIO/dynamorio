/* This file was generated by codec.py from codec.txt. */

static uint
encode_opndsgen_08000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w16(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x001f0000) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_08207c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 5 &&
        encode_opnd_w16p0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w16p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem0p(enc & 0x40000000, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_w16p0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w16p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_w0p0(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_w0p1(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_mem0p(enc & 0x40000000, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffe0ffff) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x001f0000) &&
            dst1 == (enc & 0x001f0000) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_08400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ign16(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_08808000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ign16(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_08a07c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w16(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w16(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe0ffff) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001f0000) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0a000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_shift4(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm6((enc | dst0) & 0x80000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xff3fffff) == 0);
        ASSERT((src3 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x00c00000) &&
            src3 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0b000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_shift3(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm6((enc | dst0) & 0x80000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xff3fffff) == 0);
        ASSERT((src3 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x00c00000) &&
            src3 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0b200000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0sp(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5sp(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ext(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_extam(0, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xffff1fff) == 0);
        ASSERT((src3 & 0xffffe3ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x0000e000) &&
            src3 == (enc & 0x00001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_vt2(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_vt3(0, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        ASSERT((src3 & 0xbfffffe0) == 0);
        ASSERT((src4 & 0xbfffffe0) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x400003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f) &&
            src3 == (enc & 0x4000001f) &&
            src4 == (enc & 0x4000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c004000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_vt2(0, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        ASSERT((src3 & 0xbfffffe0) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x400003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f) &&
            src3 == (enc & 0x4000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c007000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x400003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c008000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x400003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 2 &&
        encode_opnd_vt0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vt2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_vt3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x4000001f) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c404000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 2 &&
        encode_opnd_vt0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vt2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c407000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_vt0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x4000001f) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c408000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_vt0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 7 &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_vt2(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_vt3(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16imm((enc | dst0) & 0x4000f000, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        ASSERT((src3 & 0xbfffffe0) == 0);
        ASSERT((src4 & 0xbfffffe0) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x400003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f) &&
            src3 == (enc & 0x4000001f) &&
            src4 == (enc & 0x4000001f) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c804000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 6 &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_vt2(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16imm((enc | dst0) & 0x4000f000, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        ASSERT((src3 & 0xbfffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x400003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f) &&
            src3 == (enc & 0x4000001f) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c807000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16imm((enc | dst0) & 0x4000f000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x400003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c808000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16imm((enc | dst0) & 0x4000f000, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x400003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0cc00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, dst4 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 4 &&
        encode_opnd_vt0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vt2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_vt3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16imm((enc | dst0) & 0x4000f000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xbfffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x4000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0cc04000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 4 &&
        encode_opnd_vt0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vt2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16imm((enc | dst0) & 0x4000f000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0cc07000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_vt0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16imm((enc | dst0) & 0x4000f000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0cc08000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 4 &&
        encode_opnd_vt0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvm(enc & 0x0000f000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16imm((enc | dst0) & 0x4000f000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d002000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs((enc | src3) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffe3ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d004000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d006000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs((enc | src3) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffe7ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d008000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d008400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d00a000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffefff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d00a400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d200000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs((enc | src2) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffe3ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d202000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 5 &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_memvs((enc | src4) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffe3ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d204000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs((enc | src2) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffe7ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d206000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 5 &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_memvs((enc | src4) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffe7ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d208000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffefff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d208400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d20a000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffefff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d20a400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d402000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d404000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d406000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d408000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d408400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d40a000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d40a400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d40c000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_dq0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memvr(enc & 0x00202000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x4000001f) &&
            src0 == (enc & 0x00000fe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d40e000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 1 &&
        encode_opnd_dq0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_dq0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvr(enc & 0x00202000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        enc |= dst0 | dst1 | dst2 | src0;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            src0 == (enc & 0x00000fe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d600000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d602000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d604000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d606000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d608000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d608400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d60a000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d60a400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d60c000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_dq0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvr(enc & 0x00202000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            src0 == (enc & 0x00000fe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d60e000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 1 &&
        encode_opnd_dq0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_dq0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_dq0p3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvr(enc & 0x00202000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x4000001f) &&
            src0 == (enc & 0x00000fe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16immvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d802000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 6 &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs((enc | src3) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs((enc | src3) & 0x0020ec00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffe3ff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001c00) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d804000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16immvs((enc | src1) & 0x0020ec00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001800) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d806000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 6 &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs((enc | src3) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs((enc | src3) & 0x0020ec00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffe7ff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001800) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d808000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001000) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d808400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40000000) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d80a000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 6 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffefff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001000) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d80a400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 6 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffffff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40000000) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs((enc | src2) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs((enc | src2) & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffe3ff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001c00) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da02000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 7 &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_memvs((enc | src4) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs((enc | src4) & 0x0020ec00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffe3ff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001c00) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da04000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs((enc | src2) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs((enc | src2) & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffe7ff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001800) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da06000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 7 &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_memvs((enc | src4) & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs((enc | src4) & 0x0020ec00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffe7ff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001800) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da08000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffefff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001000) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da08400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffffff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40000000) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da0a000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 7 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffefff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001000) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da0a400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 7 &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffffff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40000000) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs((enc | src2) & 0x0020ec00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs((enc | src2) & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xbfffe3ff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x40001c00) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc02000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 7 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_memvs((enc | src4) & 0x0020ec00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs((enc | src4) & 0x0020ec00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xbfffe3ff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x40001c00) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc04000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs((enc | src2) & 0x0020ec00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs((enc | src2) & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xbfffe7ff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x40001800) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc06000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 7 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_memvs((enc | src4) & 0x0020ec00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs((enc | src4) & 0x0020ec00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xbfffe7ff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x40001800) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc08000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xbfffefff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x40001000) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc08400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xbfffffff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x40000000) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc0a000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 7 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xbfffefff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x40001000) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc0a400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 7 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xbfffffff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x40000000) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc0c000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_dq0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvr(enc & 0x00202000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x16immvr((enc | src0) & 0x00202c00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000fe0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc0e000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 3 &&
        encode_opnd_dq0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_dq0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvr(enc & 0x00202000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x16immvr((enc | src0) & 0x00202c00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000fe0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 6 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs((enc | src3) & 0x0020ec00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs((enc | src3) & 0x0020ec00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfffe3ff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x40001c00) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de02000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, dst4 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0, src7 = 0;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 8 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index0(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_memvs((enc | src5) & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 6), &src6) &&
        encode_opnd_x16immvs((enc | src5) & 0x0020ec00, opcode, pc, instr_get_src(instr, 7), &src7)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xbfffe3ff) == 0);
        ASSERT((src6 & 0xfffffc1f) == 0);
        ASSERT((src7 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2 | src3 | src4 | src5 | src6 | src7;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x40001c00) &&
            src6 == (enc & 0x000003e0) &&
            src7 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de04000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 6 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs((enc | src3) & 0x0020ec00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs((enc | src3) & 0x0020ec00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfffe7ff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x40001800) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de06000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, dst4 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0, src7 = 0;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 8 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index1(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_memvs((enc | src5) & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 6), &src6) &&
        encode_opnd_x16immvs((enc | src5) & 0x0020ec00, opcode, pc, instr_get_src(instr, 7), &src7)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xbfffe7ff) == 0);
        ASSERT((src6 & 0xfffffc1f) == 0);
        ASSERT((src7 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2 | src3 | src4 | src5 | src6 | src7;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x40001800) &&
            src6 == (enc & 0x000003e0) &&
            src7 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de08000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 6 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfffefff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x40001000) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de08400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 6 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfffffff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x40000000) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de0a000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, dst4 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0, src7 = 0;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 8 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_index2(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 6), &src6) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 7), &src7)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xbfffefff) == 0);
        ASSERT((src6 & 0xfffffc1f) == 0);
        ASSERT((src7 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2 | src3 | src4 | src5 | src6 | src7;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x40001000) &&
            src6 == (enc & 0x000003e0) &&
            src7 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de0a400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, dst4 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0, src5 = 0, src6 = 0, src7 = 0;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 8 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_index3(0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 6), &src6) &&
        encode_opnd_x16immvs(enc & 0x0020ec00, opcode, pc, instr_get_src(instr, 7), &src7)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xbfffffff) == 0);
        ASSERT((src6 & 0xfffffc1f) == 0);
        ASSERT((src7 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2 | src3 | src4 | src5 | src6 | src7;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x40000000) &&
            src6 == (enc & 0x000003e0) &&
            src7 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de0c000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_dq0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvr(enc & 0x00202000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x16immvr((enc | src0) & 0x00202c00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000fe0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de0e000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, dst3 = 0, dst4 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 3 &&
        encode_opnd_dq0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_dq0p2(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_dq0p3(0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_memvr(enc & 0x00202000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x16immvr((enc | src0) & 0x00202c00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xbfffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x4000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000fe0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_11000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0sp(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5sp(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_imm12(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_lsl(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm12sh(0, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0xffc003ff) == 0);
        ASSERT((src2 & 0xffffffff) == 0);
        ASSERT((src3 & 0xffbfffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x003ffc00) &&
            src2 == (enc & 0x00000000) &&
            src3 == (enc & 0x00400000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_12800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_imm16(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_lsl(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imm16sh(enc & 0x80000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe0001f) == 0);
        ASSERT((src1 & 0xffffffff) == 0);
        ASSERT((src2 & 0xff9fffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001fffe0) &&
            src1 == (enc & 0x00000000) &&
            src2 == (enc & 0x00600000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_13000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_immr(enc & 0x80000000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imms(enc & 0x80000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffc0ffff) == 0);
        ASSERT((src2 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x003f0000) &&
            src2 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_13800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imms(enc & 0x80000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_18000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memlit(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xff00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_1a000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_wx0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_1a800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_wx0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_cond(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xffff0fff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x0000f000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_1ac04000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w16(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_1b000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_wx0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_wx10(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0x7fff83ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x80007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_1c000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_s0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memlit(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xff00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_28000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w10(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x003f83e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_28400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x003f83e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_28800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7post(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_28c00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7post(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_29800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x003f83e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_29c00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x003f83e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2b200000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5sp(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ext(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_extam(0, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xffff1fff) == 0);
        ASSERT((src3 & 0xffffe3ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x0000e000) &&
            src3 == (enc & 0x00001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2c000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_s10(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x003f83e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2c400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_s0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x003f83e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2c800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7post(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_s0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_s10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2cc00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_s0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7post(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2d800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_s0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_s10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x003f83e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2dc00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_s0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x003f83e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_31000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5sp(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_imm12(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_lsl(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm12sh(0, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0xffc003ff) == 0);
        ASSERT((src2 & 0xffffffff) == 0);
        ASSERT((src3 & 0xffbfffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x003ffc00) &&
            src2 == (enc & 0x00000000) &&
            src3 == (enc & 0x00400000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_33000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w5(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_immr(enc & 0x80000000, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imms(enc & 0x80000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc0ffff) == 0);
        ASSERT((src3 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f0000) &&
            src3 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38000400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38000c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38200000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w16(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38200800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38400400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38400c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38600800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38800400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38800c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38a00800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_39000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_39400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_39800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3a400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_nzcv(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_cond(0, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xfffffff0) == 0);
        ASSERT((src3 & 0xffff0fff) == 0);
        enc |= src0 | src1 | src2 | src3;
        if (src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x0000000f) &&
            src3 == (enc & 0x0000f000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3a400800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_imm5(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_nzcv(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_cond(0, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xfffffff0) == 0);
        ASSERT((src3 & 0xffff0fff) == 0);
        enc |= src0 | src1 | src2 | src3;
        if (src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x0000000f) &&
            src3 == (enc & 0x0000f000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_b0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c000400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_b0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c000c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_b0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c200800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_b0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_b0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c400400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_b0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c400c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_b0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c600800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_b0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c800400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9qpost(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c800c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9q(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3ca00800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memregq(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_b0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3cc00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3cc00400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9qpost(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3cc00c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9q(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3ce00800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memregq(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3d000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_b0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3d400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_b0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3d800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12q(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3dc00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12q(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_48207c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0, src4 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 5 &&
        encode_opnd_x16p0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x16p1(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem0p(enc & 0x40000000, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x16p0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x16p1(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x0p0(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x0p1(0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_mem0p(enc & 0x40000000, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffe0ffff) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x001f0000) &&
            dst1 == (enc & 0x001f0000) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_58000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memlit(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xff00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_5ac00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_wx0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_5ac00800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_5c000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_d0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memlit(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xff00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_68c00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7post(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_69400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x003f83e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_69c00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x003f83e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6c000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_d10(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x003f83e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6c400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_d0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x003f83e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6c800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7post(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_d0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_d10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6cc00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_d0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7post(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6d800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_d0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_d10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x003f83e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6dc00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_d0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x003f83e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_72800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_imm16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_lsl(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm16sh(enc & 0x80000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffe0001f) == 0);
        ASSERT((src2 & 0xffffffff) == 0);
        ASSERT((src3 & 0xff9fffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x001fffe0) &&
            src2 == (enc & 0x00000000) &&
            src3 == (enc & 0x00600000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_h0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c000400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_h0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c000c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_h0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c200800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_h0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_h0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c400400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_h0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c400c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_h0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c600800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_h0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7d000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_h0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7d400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_h0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_88200000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem0p(enc & 0x40000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w16(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w10(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x001f0000) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_88600000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem0p(enc & 0x40000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign16(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_92800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_imm16(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_lsl(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imm16sh(enc & 0x80000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe0001f) == 0);
        ASSERT((src1 & 0xffffffff) == 0);
        ASSERT((src2 & 0xff9fffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001fffe0) &&
            src1 == (enc & 0x00000000) &&
            src2 == (enc & 0x00600000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_93400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_immr(enc & 0x80000000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imms(enc & 0x80000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffc0ffff) == 0);
        ASSERT((src2 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x003f0000) &&
            src2 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_93c00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imms(enc & 0x80000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_9ac04c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_w0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x16(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_9b200000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x10(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_9b400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ign10(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_9c000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memlit(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xff00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_a8000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x10(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x003f83e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_a8800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7post(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_a9800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x003f83e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_ac000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q10(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x003f83e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_ac400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x003f83e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_ac800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7post(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_acc00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7post(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_ad800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x003f83e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_adc00000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, dst2 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_q0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x003f83e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_b3400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_immr(enc & 0x80000000, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imms(enc & 0x80000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc0ffff) == 0);
        ASSERT((src3 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f0000) &&
            src3 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc000400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_s0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc000c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_s0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc200800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_s0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc400400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_s0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc400c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_s0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc600800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_s0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bd000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bd400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_s0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w16(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x001f0000) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8200000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem0p(enc & 0x40000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w16(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x10(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x001f0000) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ign16(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8600000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x10(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem0p(enc & 0x40000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign16(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8808000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ign16(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8a07c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x16(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x16(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe0ffff) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001f0000) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d4000001(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint src0 = 0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 1 &&
        encode_opnd_imm16(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((src0 & 0xffe0001f) == 0);
        enc |= src0;
        if (src0 == (enc & 0x001fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d503201f(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    return enc;
}

static uint
encode_opndsgen_d503305f(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint src0 = 0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 1 &&
        encode_opnd_imm4(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((src0 & 0xfffff0ff) == 0);
        enc |= src0;
        if (src0 == (enc & 0x00000f00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d5080000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 2 &&
        encode_opnd_sysops(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((src0 & 0xfff8001f) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        enc |= src0 | src1;
        if (src0 == (enc & 0x0007ffe0) &&
            src1 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d5280000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_sysops(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfff8001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x0007ffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d5300000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_sysreg(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfff0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d61f0000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint src0 = 0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x5(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((src0 & 0xfffffc1f) == 0);
        enc |= src0;
        if (src0 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d63f0000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_impx30(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffff) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x00000000) &&
            src0 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d8000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 2 &&
        encode_opnd_prfop(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_memlit(enc & 0xc4000000, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xff00001f) == 0);
        enc |= src0 | src1;
        if (src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_dac00800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f2800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0, src1 = 0, src2 = 0, src3 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_imm16(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_lsl(0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm16sh(enc & 0x80000000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffe0001f) == 0);
        ASSERT((src2 & 0xffffffff) == 0);
        ASSERT((src3 & 0xff9fffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x001fffe0) &&
            src2 == (enc & 0x00000000) &&
            src3 == (enc & 0x00600000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8000400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8000c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8200000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_x0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x16(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_mem0(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8200800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 2 &&
        encode_opnd_prfop(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_prf9(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffe00c1f) == 0);
        enc |= src0 | src1;
        if (src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8a00800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 2 &&
        encode_opnd_prfop(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_prfreg(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffe00c1f) == 0);
        enc |= src0 | src1;
        if (src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f9000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f9800000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint src0 = 0, src1 = 0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 2 &&
        encode_opnd_prfop(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_prf12(0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffc0001f) == 0);
        enc |= src0 | src1;
        if (src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc000400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_d0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc000c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_d0(0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc200800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_d0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc400400(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_d0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc400c00(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, dst1 = 0, src0 = 0, src1 = 0, src2 = 0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_d0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc600800(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_d0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fd000000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d0(0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fd400000(byte *pc, instr_t *instr, uint enc, decode_info_t *di)
{
    int opcode = instr->opcode;
    uint dst0 = 0, src0 = 0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_d0(0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xc0000000, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encoder(byte *pc, instr_t *instr, decode_info_t *di)
{
    uint enc;
    (void)enc;
    switch (instr->opcode) {
    case OP_adc:
        return encode_opndsgen_1a000000(pc, instr, 0x1a000000, di);
    case OP_adcs:
        return encode_opndsgen_1a000000(pc, instr, 0x3a000000, di);
    case OP_add:
        enc = encode_opndsgen_0b000000(pc, instr, 0x0b000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0b200000(pc, instr, 0x0b200000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_11000000(pc, instr, 0x11000000, di);
    case OP_adds:
        enc = encode_opndsgen_0b000000(pc, instr, 0x2b000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_2b200000(pc, instr, 0x2b200000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_31000000(pc, instr, 0x31000000, di);
    case OP_adr:
        return encode_opnds_adr(pc, instr, 0x10000000, di);
    case OP_adrp:
        return encode_opnds_adr(pc, instr, 0x90000000, di);
    case OP_and:
        enc = encode_opnds_logic_imm(pc, instr, 0x12000000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0x0a000000, di);
    case OP_ands:
        enc = encode_opnds_logic_imm(pc, instr, 0x72000000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0x6a000000, di);
    case OP_asrv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac02800, di);
    case OP_b:
        return encode_opnds_b(pc, instr, 0x14000000, di);
    case OP_bcond:
        return encode_opnds_bcond(pc, instr, 0x54000000, di);
    case OP_bfm:
        enc = encode_opndsgen_33000000(pc, instr, 0x33000000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_b3400000(pc, instr, 0xb3400000, di);
    case OP_bic:
        return encode_opndsgen_0a000000(pc, instr, 0x0a200000, di);
    case OP_bics:
        return encode_opndsgen_0a000000(pc, instr, 0x6a200000, di);
    case OP_bl:
        return encode_opnds_b(pc, instr, 0x94000000, di);
    case OP_blr:
        return encode_opndsgen_d63f0000(pc, instr, 0xd63f0000, di);
    case OP_br:
        return encode_opndsgen_d61f0000(pc, instr, 0xd61f0000, di);
    case OP_brk:
        return encode_opndsgen_d4000001(pc, instr, 0xd4200000, di);
    case OP_cas:
        enc = encode_opndsgen_08a07c00(pc, instr, 0x88a07c00, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8a07c00(pc, instr, 0xc8a07c00, di);
    case OP_casa:
        enc = encode_opndsgen_08a07c00(pc, instr, 0x88e07c00, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8a07c00(pc, instr, 0xc8e07c00, di);
    case OP_casab:
        return encode_opndsgen_08a07c00(pc, instr, 0x08e07c00, di);
    case OP_casah:
        return encode_opndsgen_08a07c00(pc, instr, 0x48e07c00, di);
    case OP_casal:
        enc = encode_opndsgen_08a07c00(pc, instr, 0x88e0fc00, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8a07c00(pc, instr, 0xc8e0fc00, di);
    case OP_casalb:
        return encode_opndsgen_08a07c00(pc, instr, 0x08e0fc00, di);
    case OP_casalh:
        return encode_opndsgen_08a07c00(pc, instr, 0x48e0fc00, di);
    case OP_casb:
        return encode_opndsgen_08a07c00(pc, instr, 0x08a07c00, di);
    case OP_cash:
        return encode_opndsgen_08a07c00(pc, instr, 0x48a07c00, di);
    case OP_casl:
        enc = encode_opndsgen_08a07c00(pc, instr, 0x88a0fc00, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8a07c00(pc, instr, 0xc8a0fc00, di);
    case OP_caslb:
        return encode_opndsgen_08a07c00(pc, instr, 0x08a0fc00, di);
    case OP_caslh:
        return encode_opndsgen_08a07c00(pc, instr, 0x48a0fc00, di);
    case OP_casp:
        enc = encode_opndsgen_08207c00(pc, instr, 0x08207c00, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_48207c00(pc, instr, 0x48207c00, di);
    case OP_caspa:
        enc = encode_opndsgen_08207c00(pc, instr, 0x08607c00, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_48207c00(pc, instr, 0x48607c00, di);
    case OP_caspal:
        enc = encode_opndsgen_08207c00(pc, instr, 0x0860fc00, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_48207c00(pc, instr, 0x4860fc00, di);
    case OP_caspl:
        enc = encode_opndsgen_08207c00(pc, instr, 0x0820fc00, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_48207c00(pc, instr, 0x4820fc00, di);
    case OP_cbnz:
        return encode_opnds_cbz(pc, instr, 0x35000000, di);
    case OP_cbz:
        return encode_opnds_cbz(pc, instr, 0x34000000, di);
    case OP_ccmn:
        enc = encode_opndsgen_3a400000(pc, instr, 0x3a400000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_3a400800(pc, instr, 0x3a400800, di);
    case OP_ccmp:
        enc = encode_opndsgen_3a400000(pc, instr, 0x7a400000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_3a400800(pc, instr, 0x7a400800, di);
    case OP_clrex:
        return encode_opndsgen_d503305f(pc, instr, 0xd503305f, di);
    case OP_cls:
        return encode_opndsgen_5ac00000(pc, instr, 0x5ac01400, di);
    case OP_clz:
        return encode_opndsgen_5ac00000(pc, instr, 0x5ac01000, di);
    case OP_crc32b:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac04000, di);
    case OP_crc32cb:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac05000, di);
    case OP_crc32ch:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac05400, di);
    case OP_crc32cw:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac05800, di);
    case OP_crc32cx:
        return encode_opndsgen_9ac04c00(pc, instr, 0x9ac05c00, di);
    case OP_crc32h:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac04400, di);
    case OP_crc32w:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac04800, di);
    case OP_crc32x:
        return encode_opndsgen_9ac04c00(pc, instr, 0x9ac04c00, di);
    case OP_csel:
        return encode_opndsgen_1a800000(pc, instr, 0x1a800000, di);
    case OP_csinc:
        return encode_opndsgen_1a800000(pc, instr, 0x1a800400, di);
    case OP_csinv:
        return encode_opndsgen_1a800000(pc, instr, 0x5a800000, di);
    case OP_csneg:
        return encode_opndsgen_1a800000(pc, instr, 0x5a800400, di);
    case OP_dmb:
        return encode_opndsgen_d503305f(pc, instr, 0xd50330bf, di);
    case OP_dsb:
        return encode_opndsgen_d503305f(pc, instr, 0xd503309f, di);
    case OP_eon:
        return encode_opndsgen_0a000000(pc, instr, 0x4a200000, di);
    case OP_eor:
        enc = encode_opnds_logic_imm(pc, instr, 0x52000000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0x4a000000, di);
    case OP_extr:
        enc = encode_opndsgen_13800000(pc, instr, 0x13800000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_93c00000(pc, instr, 0x93c00000, di);
    case OP_hlt:
        return encode_opndsgen_d4000001(pc, instr, 0xd4400000, di);
    case OP_hvc:
        return encode_opndsgen_d4000001(pc, instr, 0xd4000002, di);
    case OP_isb:
        return encode_opndsgen_d503305f(pc, instr, 0xd50330df, di);
    case OP_ld1:
        enc = encode_opndsgen_0c400000(pc, instr, 0x0c402000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c404000(pc, instr, 0x0c406000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c407000(pc, instr, 0x0c407000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c408000(pc, instr, 0x0c40a000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0cc00000(pc, instr, 0x0cc02000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0cc04000(pc, instr, 0x0cc06000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0cc07000(pc, instr, 0x0cc07000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0cc08000(pc, instr, 0x0cc0a000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d400000(pc, instr, 0x0d400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d404000(pc, instr, 0x0d404000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d408000(pc, instr, 0x0d408000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d408400(pc, instr, 0x0d408400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0dc00000(pc, instr, 0x0dc00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0dc04000(pc, instr, 0x0dc04000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0dc08000(pc, instr, 0x0dc08000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0dc08400(pc, instr, 0x0dc08400, di);
    case OP_ld1r:
        enc = encode_opndsgen_0d40c000(pc, instr, 0x0d40c000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0dc0c000(pc, instr, 0x0dc0c000, di);
    case OP_ld2:
        enc = encode_opndsgen_0c408000(pc, instr, 0x0c408000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0cc08000(pc, instr, 0x0cc08000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d600000(pc, instr, 0x0d600000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d604000(pc, instr, 0x0d604000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d608000(pc, instr, 0x0d608000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d608400(pc, instr, 0x0d608400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0de00000(pc, instr, 0x0de00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0de04000(pc, instr, 0x0de04000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0de08000(pc, instr, 0x0de08000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0de08400(pc, instr, 0x0de08400, di);
    case OP_ld2r:
        enc = encode_opndsgen_0d60c000(pc, instr, 0x0d60c000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0de0c000(pc, instr, 0x0de0c000, di);
    case OP_ld3:
        enc = encode_opndsgen_0c404000(pc, instr, 0x0c404000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0cc04000(pc, instr, 0x0cc04000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d402000(pc, instr, 0x0d402000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d406000(pc, instr, 0x0d406000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d40a000(pc, instr, 0x0d40a000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d40a400(pc, instr, 0x0d40a400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0dc02000(pc, instr, 0x0dc02000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0dc06000(pc, instr, 0x0dc06000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0dc0a000(pc, instr, 0x0dc0a000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0dc0a400(pc, instr, 0x0dc0a400, di);
    case OP_ld3r:
        enc = encode_opndsgen_0d40e000(pc, instr, 0x0d40e000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0dc0e000(pc, instr, 0x0dc0e000, di);
    case OP_ld4:
        enc = encode_opndsgen_0c400000(pc, instr, 0x0c400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0cc00000(pc, instr, 0x0cc00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d602000(pc, instr, 0x0d602000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d606000(pc, instr, 0x0d606000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d60a000(pc, instr, 0x0d60a000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d60a400(pc, instr, 0x0d60a400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0de02000(pc, instr, 0x0de02000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0de06000(pc, instr, 0x0de06000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0de0a000(pc, instr, 0x0de0a000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0de0a400(pc, instr, 0x0de0a400, di);
    case OP_ld4r:
        enc = encode_opndsgen_0d60e000(pc, instr, 0x0d60e000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0de0e000(pc, instr, 0x0de0e000, di);
    case OP_ldadd:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8200000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8200000, di);
    case OP_ldadda:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8a00000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a00000, di);
    case OP_ldaddab:
        return encode_opndsgen_38200000(pc, instr, 0x38a00000, di);
    case OP_ldaddah:
        return encode_opndsgen_38200000(pc, instr, 0x78a00000, di);
    case OP_ldaddal:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8e00000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e00000, di);
    case OP_ldaddalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e00000, di);
    case OP_ldaddalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e00000, di);
    case OP_ldaddb:
        return encode_opndsgen_38200000(pc, instr, 0x38200000, di);
    case OP_ldaddh:
        return encode_opndsgen_38200000(pc, instr, 0x78200000, di);
    case OP_ldaddl:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8600000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8600000, di);
    case OP_ldaddlb:
        return encode_opndsgen_38200000(pc, instr, 0x38600000, di);
    case OP_ldaddlh:
        return encode_opndsgen_38200000(pc, instr, 0x78600000, di);
    case OP_ldar:
        enc = encode_opndsgen_08400000(pc, instr, 0x88c08000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8400000(pc, instr, 0xc8c08000, di);
    case OP_ldarb:
        return encode_opndsgen_08400000(pc, instr, 0x08c08000, di);
    case OP_ldarh:
        return encode_opndsgen_08400000(pc, instr, 0x48c08000, di);
    case OP_ldaxp:
        enc = encode_opndsgen_88600000(pc, instr, 0x88608000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8600000(pc, instr, 0xc8608000, di);
    case OP_ldaxr:
        enc = encode_opndsgen_08400000(pc, instr, 0x88408000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8400000(pc, instr, 0xc8408000, di);
    case OP_ldaxrb:
        return encode_opndsgen_08400000(pc, instr, 0x08408000, di);
    case OP_ldaxrh:
        return encode_opndsgen_08400000(pc, instr, 0x48408000, di);
    case OP_ldclr:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8201000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8201000, di);
    case OP_ldclra:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8a01000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a01000, di);
    case OP_ldclrab:
        return encode_opndsgen_38200000(pc, instr, 0x38a01000, di);
    case OP_ldclrah:
        return encode_opndsgen_38200000(pc, instr, 0x78a01000, di);
    case OP_ldclral:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8e01000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e01000, di);
    case OP_ldclralb:
        return encode_opndsgen_38200000(pc, instr, 0x38e01000, di);
    case OP_ldclralh:
        return encode_opndsgen_38200000(pc, instr, 0x78e01000, di);
    case OP_ldclrb:
        return encode_opndsgen_38200000(pc, instr, 0x38201000, di);
    case OP_ldclrh:
        return encode_opndsgen_38200000(pc, instr, 0x78201000, di);
    case OP_ldclrl:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8601000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8601000, di);
    case OP_ldclrlb:
        return encode_opndsgen_38200000(pc, instr, 0x38601000, di);
    case OP_ldclrlh:
        return encode_opndsgen_38200000(pc, instr, 0x78601000, di);
    case OP_ldeor:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8202000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8202000, di);
    case OP_ldeora:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8a02000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a02000, di);
    case OP_ldeorab:
        return encode_opndsgen_38200000(pc, instr, 0x38a02000, di);
    case OP_ldeorah:
        return encode_opndsgen_38200000(pc, instr, 0x78a02000, di);
    case OP_ldeoral:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8e02000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e02000, di);
    case OP_ldeoralb:
        return encode_opndsgen_38200000(pc, instr, 0x38e02000, di);
    case OP_ldeoralh:
        return encode_opndsgen_38200000(pc, instr, 0x78e02000, di);
    case OP_ldeorb:
        return encode_opndsgen_38200000(pc, instr, 0x38202000, di);
    case OP_ldeorh:
        return encode_opndsgen_38200000(pc, instr, 0x78202000, di);
    case OP_ldeorl:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8602000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8602000, di);
    case OP_ldeorlb:
        return encode_opndsgen_38200000(pc, instr, 0x38602000, di);
    case OP_ldeorlh:
        return encode_opndsgen_38200000(pc, instr, 0x78602000, di);
    case OP_ldnp:
        enc = encode_opndsgen_28400000(pc, instr, 0x28400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_2c400000(pc, instr, 0x2c400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_69400000(pc, instr, 0xa8400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_6c400000(pc, instr, 0x6c400000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_ac400000(pc, instr, 0xac400000, di);
    case OP_ldp:
        enc = encode_opndsgen_28400000(pc, instr, 0x29400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_28c00000(pc, instr, 0x28c00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_29c00000(pc, instr, 0x29c00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_2c400000(pc, instr, 0x2d400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_2cc00000(pc, instr, 0x2cc00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_2dc00000(pc, instr, 0x2dc00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_68c00000(pc, instr, 0xa8c00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_69400000(pc, instr, 0xa9400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_69c00000(pc, instr, 0xa9c00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_6c400000(pc, instr, 0x6d400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_6cc00000(pc, instr, 0x6cc00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_6dc00000(pc, instr, 0x6dc00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_ac400000(pc, instr, 0xad400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_acc00000(pc, instr, 0xacc00000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_adc00000(pc, instr, 0xadc00000, di);
    case OP_ldpsw:
        enc = encode_opndsgen_68c00000(pc, instr, 0x68c00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_69400000(pc, instr, 0x69400000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_69c00000(pc, instr, 0x69c00000, di);
    case OP_ldr:
        enc = encode_opndsgen_18000000(pc, instr, 0x18000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_1c000000(pc, instr, 0x1c000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38400400(pc, instr, 0xb8400400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38400c00(pc, instr, 0xb8400c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38600800(pc, instr, 0xb8600800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38800400(pc, instr, 0xf8400400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38800c00(pc, instr, 0xf8400c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38a00800(pc, instr, 0xf8600800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_39400000(pc, instr, 0xb9400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_39800000(pc, instr, 0xf9400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c400400(pc, instr, 0x3c400400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c400c00(pc, instr, 0x3c400c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c600800(pc, instr, 0x3c600800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3cc00400(pc, instr, 0x3cc00400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3cc00c00(pc, instr, 0x3cc00c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3ce00800(pc, instr, 0x3ce00800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3d400000(pc, instr, 0x3d400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3dc00000(pc, instr, 0x3dc00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_58000000(pc, instr, 0x58000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_5c000000(pc, instr, 0x5c000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_7c400400(pc, instr, 0x7c400400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_7c400c00(pc, instr, 0x7c400c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_7c600800(pc, instr, 0x7c600800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_7d400000(pc, instr, 0x7d400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_9c000000(pc, instr, 0x9c000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_bc400400(pc, instr, 0xbc400400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_bc400c00(pc, instr, 0xbc400c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_bc600800(pc, instr, 0xbc600800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_bd400000(pc, instr, 0xbd400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_fc400400(pc, instr, 0xfc400400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_fc400c00(pc, instr, 0xfc400c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_fc600800(pc, instr, 0xfc600800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_fd400000(pc, instr, 0xfd400000, di);
    case OP_ldrb:
        enc = encode_opndsgen_38400400(pc, instr, 0x38400400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38400c00(pc, instr, 0x38400c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38600800(pc, instr, 0x38600800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_39400000(pc, instr, 0x39400000, di);
    case OP_ldrh:
        enc = encode_opndsgen_38400400(pc, instr, 0x78400400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38400c00(pc, instr, 0x78400c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38600800(pc, instr, 0x78600800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_39400000(pc, instr, 0x79400000, di);
    case OP_ldrsb:
        enc = encode_opndsgen_38400400(pc, instr, 0x38c00400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38400c00(pc, instr, 0x38c00c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38600800(pc, instr, 0x38e00800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38800400(pc, instr, 0x38800400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38800c00(pc, instr, 0x38800c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38a00800(pc, instr, 0x38a00800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_39400000(pc, instr, 0x39c00000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_39800000(pc, instr, 0x39800000, di);
    case OP_ldrsh:
        enc = encode_opndsgen_38400400(pc, instr, 0x78c00400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38400c00(pc, instr, 0x78c00c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38600800(pc, instr, 0x78e00800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38800400(pc, instr, 0x78800400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38800c00(pc, instr, 0x78800c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38a00800(pc, instr, 0x78a00800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_39400000(pc, instr, 0x79c00000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_39800000(pc, instr, 0x79800000, di);
    case OP_ldrsw:
        enc = encode_opndsgen_38800400(pc, instr, 0xb8800400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38800c00(pc, instr, 0xb8800c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38a00800(pc, instr, 0xb8a00800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_39800000(pc, instr, 0xb9800000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_58000000(pc, instr, 0x98000000, di);
    case OP_ldset:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8203000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8203000, di);
    case OP_ldseta:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8a03000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a03000, di);
    case OP_ldsetab:
        return encode_opndsgen_38200000(pc, instr, 0x38a03000, di);
    case OP_ldsetah:
        return encode_opndsgen_38200000(pc, instr, 0x78a03000, di);
    case OP_ldsetal:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8e03000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e03000, di);
    case OP_ldsetalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e03000, di);
    case OP_ldsetalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e03000, di);
    case OP_ldsetb:
        return encode_opndsgen_38200000(pc, instr, 0x38203000, di);
    case OP_ldseth:
        return encode_opndsgen_38200000(pc, instr, 0x78203000, di);
    case OP_ldsetl:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8603000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8603000, di);
    case OP_ldsetlb:
        return encode_opndsgen_38200000(pc, instr, 0x38603000, di);
    case OP_ldsetlh:
        return encode_opndsgen_38200000(pc, instr, 0x78603000, di);
    case OP_ldsmax:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8204000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8204000, di);
    case OP_ldsmaxa:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8a04000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a04000, di);
    case OP_ldsmaxab:
        return encode_opndsgen_38200000(pc, instr, 0x38a04000, di);
    case OP_ldsmaxah:
        return encode_opndsgen_38200000(pc, instr, 0x78a04000, di);
    case OP_ldsmaxal:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8e04000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e04000, di);
    case OP_ldsmaxalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e04000, di);
    case OP_ldsmaxalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e04000, di);
    case OP_ldsmaxb:
        return encode_opndsgen_38200000(pc, instr, 0x38204000, di);
    case OP_ldsmaxh:
        return encode_opndsgen_38200000(pc, instr, 0x78204000, di);
    case OP_ldsmaxl:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8604000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8604000, di);
    case OP_ldsmaxlb:
        return encode_opndsgen_38200000(pc, instr, 0x38604000, di);
    case OP_ldsmaxlh:
        return encode_opndsgen_38200000(pc, instr, 0x78604000, di);
    case OP_ldsmin:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8205000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8205000, di);
    case OP_ldsmina:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8a05000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a05000, di);
    case OP_ldsminab:
        return encode_opndsgen_38200000(pc, instr, 0x38a05000, di);
    case OP_ldsminah:
        return encode_opndsgen_38200000(pc, instr, 0x78a05000, di);
    case OP_ldsminal:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8e05000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e05000, di);
    case OP_ldsminalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e05000, di);
    case OP_ldsminalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e05000, di);
    case OP_ldsminb:
        return encode_opndsgen_38200000(pc, instr, 0x38205000, di);
    case OP_ldsminh:
        return encode_opndsgen_38200000(pc, instr, 0x78205000, di);
    case OP_ldsminl:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8605000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8605000, di);
    case OP_ldsminlb:
        return encode_opndsgen_38200000(pc, instr, 0x38605000, di);
    case OP_ldsminlh:
        return encode_opndsgen_38200000(pc, instr, 0x78605000, di);
    case OP_ldtr:
        enc = encode_opndsgen_38400000(pc, instr, 0xb8400800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_38800000(pc, instr, 0xf8400800, di);
    case OP_ldtrb:
        return encode_opndsgen_38400000(pc, instr, 0x38400800, di);
    case OP_ldtrh:
        return encode_opndsgen_38400000(pc, instr, 0x78400800, di);
    case OP_ldtrsb:
        enc = encode_opndsgen_38400000(pc, instr, 0x38c00800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_38800000(pc, instr, 0x38800800, di);
    case OP_ldtrsh:
        enc = encode_opndsgen_38400000(pc, instr, 0x78c00800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_38800000(pc, instr, 0x78800800, di);
    case OP_ldtrsw:
        return encode_opndsgen_38800000(pc, instr, 0xb8800800, di);
    case OP_ldumax:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8206000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8206000, di);
    case OP_ldumaxa:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8a06000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a06000, di);
    case OP_ldumaxab:
        return encode_opndsgen_38200000(pc, instr, 0x38a06000, di);
    case OP_ldumaxah:
        return encode_opndsgen_38200000(pc, instr, 0x78a06000, di);
    case OP_ldumaxal:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8e06000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e06000, di);
    case OP_ldumaxalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e06000, di);
    case OP_ldumaxalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e06000, di);
    case OP_ldumaxb:
        return encode_opndsgen_38200000(pc, instr, 0x38206000, di);
    case OP_ldumaxh:
        return encode_opndsgen_38200000(pc, instr, 0x78206000, di);
    case OP_ldumaxl:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8606000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8606000, di);
    case OP_ldumaxlb:
        return encode_opndsgen_38200000(pc, instr, 0x38606000, di);
    case OP_ldumaxlh:
        return encode_opndsgen_38200000(pc, instr, 0x78606000, di);
    case OP_ldumin:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8207000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8207000, di);
    case OP_ldumina:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8a07000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a07000, di);
    case OP_lduminab:
        return encode_opndsgen_38200000(pc, instr, 0x38a07000, di);
    case OP_lduminah:
        return encode_opndsgen_38200000(pc, instr, 0x78a07000, di);
    case OP_lduminal:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8e07000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e07000, di);
    case OP_lduminalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e07000, di);
    case OP_lduminalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e07000, di);
    case OP_lduminb:
        return encode_opndsgen_38200000(pc, instr, 0x38207000, di);
    case OP_lduminh:
        return encode_opndsgen_38200000(pc, instr, 0x78207000, di);
    case OP_lduminl:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8607000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8607000, di);
    case OP_lduminlb:
        return encode_opndsgen_38200000(pc, instr, 0x38607000, di);
    case OP_lduminlh:
        return encode_opndsgen_38200000(pc, instr, 0x78607000, di);
    case OP_ldur:
        enc = encode_opndsgen_38400000(pc, instr, 0xb8400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38800000(pc, instr, 0xf8400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c400000(pc, instr, 0x3c400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3cc00000(pc, instr, 0x3cc00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_7c400000(pc, instr, 0x7c400000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_bc400000(pc, instr, 0xbc400000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_fc400000(pc, instr, 0xfc400000, di);
    case OP_ldurb:
        return encode_opndsgen_38400000(pc, instr, 0x38400000, di);
    case OP_ldurh:
        return encode_opndsgen_38400000(pc, instr, 0x78400000, di);
    case OP_ldursb:
        enc = encode_opndsgen_38400000(pc, instr, 0x38c00000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_38800000(pc, instr, 0x38800000, di);
    case OP_ldursh:
        enc = encode_opndsgen_38400000(pc, instr, 0x78c00000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_38800000(pc, instr, 0x78800000, di);
    case OP_ldursw:
        return encode_opndsgen_38800000(pc, instr, 0xb8800000, di);
    case OP_ldxp:
        enc = encode_opndsgen_88600000(pc, instr, 0x88600000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8600000(pc, instr, 0xc8600000, di);
    case OP_ldxr:
        enc = encode_opndsgen_08400000(pc, instr, 0x88400000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8400000(pc, instr, 0xc8400000, di);
    case OP_ldxrb:
        return encode_opndsgen_08400000(pc, instr, 0x08400000, di);
    case OP_ldxrh:
        return encode_opndsgen_08400000(pc, instr, 0x48400000, di);
    case OP_lslv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac02000, di);
    case OP_lsrv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac02400, di);
    case OP_madd:
        return encode_opndsgen_1b000000(pc, instr, 0x1b000000, di);
    case OP_movk:
        enc = encode_opndsgen_72800000(pc, instr, 0x72800000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f2800000(pc, instr, 0xf2800000, di);
    case OP_movn:
        enc = encode_opndsgen_12800000(pc, instr, 0x12800000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_92800000(pc, instr, 0x92800000, di);
    case OP_movz:
        enc = encode_opndsgen_12800000(pc, instr, 0x52800000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_92800000(pc, instr, 0xd2800000, di);
    case OP_mrs:
        return encode_opndsgen_d5300000(pc, instr, 0xd5300000, di);
    case OP_msr:
        return encode_opnds_msr(pc, instr, 0xd5100000, di);
    case OP_msub:
        return encode_opndsgen_1b000000(pc, instr, 0x1b008000, di);
    case OP_nop:
        return encode_opndsgen_d503201f(pc, instr, 0xd503201f, di);
    case OP_orn:
        return encode_opndsgen_0a000000(pc, instr, 0x2a200000, di);
    case OP_orr:
        enc = encode_opnds_logic_imm(pc, instr, 0x32000000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0x2a000000, di);
    case OP_prfm:
        enc = encode_opndsgen_d8000000(pc, instr, 0xd8000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_f8a00800(pc, instr, 0xf8a00800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f9800000(pc, instr, 0xf9800000, di);
    case OP_prfum:
        return encode_opndsgen_f8800000(pc, instr, 0xf8800000, di);
    case OP_rbit:
        return encode_opndsgen_5ac00000(pc, instr, 0x5ac00000, di);
    case OP_ret:
        return encode_opndsgen_d61f0000(pc, instr, 0xd65f0000, di);
    case OP_rev:
        enc = encode_opndsgen_5ac00800(pc, instr, 0x5ac00800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_dac00800(pc, instr, 0xdac00c00, di);
    case OP_rev16:
        return encode_opndsgen_5ac00000(pc, instr, 0x5ac00400, di);
    case OP_rev32:
        return encode_opndsgen_dac00800(pc, instr, 0xdac00800, di);
    case OP_rorv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac02c00, di);
    case OP_sbc:
        return encode_opndsgen_1a000000(pc, instr, 0x5a000000, di);
    case OP_sbcs:
        return encode_opndsgen_1a000000(pc, instr, 0x7a000000, di);
    case OP_sbfm:
        enc = encode_opndsgen_13000000(pc, instr, 0x13000000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_93400000(pc, instr, 0x93400000, di);
    case OP_sdiv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac00c00, di);
    case OP_sev:
        return encode_opndsgen_d503201f(pc, instr, 0xd503209f, di);
    case OP_sevl:
        return encode_opndsgen_d503201f(pc, instr, 0xd50320bf, di);
    case OP_smaddl:
        return encode_opndsgen_9b200000(pc, instr, 0x9b200000, di);
    case OP_smc:
        return encode_opndsgen_d4000001(pc, instr, 0xd4000003, di);
    case OP_smsubl:
        return encode_opndsgen_9b200000(pc, instr, 0x9b208000, di);
    case OP_smulh:
        return encode_opndsgen_9b400000(pc, instr, 0x9b400000, di);
    case OP_st1:
        enc = encode_opndsgen_0c000000(pc, instr, 0x0c002000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c004000(pc, instr, 0x0c006000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c007000(pc, instr, 0x0c007000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c008000(pc, instr, 0x0c00a000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c800000(pc, instr, 0x0c802000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c804000(pc, instr, 0x0c806000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c807000(pc, instr, 0x0c807000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c808000(pc, instr, 0x0c80a000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d000000(pc, instr, 0x0d000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d004000(pc, instr, 0x0d004000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d008000(pc, instr, 0x0d008000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d008400(pc, instr, 0x0d008400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d800000(pc, instr, 0x0d800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d804000(pc, instr, 0x0d804000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d808000(pc, instr, 0x0d808000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0d808400(pc, instr, 0x0d808400, di);
    case OP_st2:
        enc = encode_opndsgen_0c008000(pc, instr, 0x0c008000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c808000(pc, instr, 0x0c808000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d200000(pc, instr, 0x0d200000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d204000(pc, instr, 0x0d204000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d208000(pc, instr, 0x0d208000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d208400(pc, instr, 0x0d208400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0da00000(pc, instr, 0x0da00000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0da04000(pc, instr, 0x0da04000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0da08000(pc, instr, 0x0da08000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0da08400(pc, instr, 0x0da08400, di);
    case OP_st3:
        enc = encode_opndsgen_0c004000(pc, instr, 0x0c004000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c804000(pc, instr, 0x0c804000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d002000(pc, instr, 0x0d002000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d006000(pc, instr, 0x0d006000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d00a000(pc, instr, 0x0d00a000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d00a400(pc, instr, 0x0d00a400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d802000(pc, instr, 0x0d802000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d806000(pc, instr, 0x0d806000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d80a000(pc, instr, 0x0d80a000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0d80a400(pc, instr, 0x0d80a400, di);
    case OP_st4:
        enc = encode_opndsgen_0c000000(pc, instr, 0x0c000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0c800000(pc, instr, 0x0c800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d202000(pc, instr, 0x0d202000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d206000(pc, instr, 0x0d206000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d20a000(pc, instr, 0x0d20a000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0d20a400(pc, instr, 0x0d20a400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0da02000(pc, instr, 0x0da02000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0da06000(pc, instr, 0x0da06000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0da0a000(pc, instr, 0x0da0a000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_0da0a400(pc, instr, 0x0da0a400, di);
    case OP_stlr:
        enc = encode_opndsgen_08808000(pc, instr, 0x88808000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8808000(pc, instr, 0xc8808000, di);
    case OP_stlrb:
        return encode_opndsgen_08808000(pc, instr, 0x08808000, di);
    case OP_stlrh:
        return encode_opndsgen_08808000(pc, instr, 0x48808000, di);
    case OP_stlxp:
        enc = encode_opndsgen_88200000(pc, instr, 0x88208000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8200000(pc, instr, 0xc8208000, di);
    case OP_stlxr:
        enc = encode_opndsgen_08000000(pc, instr, 0x88008000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8000000(pc, instr, 0xc8008000, di);
    case OP_stlxrb:
        return encode_opndsgen_08000000(pc, instr, 0x08008000, di);
    case OP_stlxrh:
        return encode_opndsgen_08000000(pc, instr, 0x48008000, di);
    case OP_stnp:
        enc = encode_opndsgen_28000000(pc, instr, 0x28000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_2c000000(pc, instr, 0x2c000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_6c000000(pc, instr, 0x6c000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_a8000000(pc, instr, 0xa8000000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_ac000000(pc, instr, 0xac000000, di);
    case OP_stp:
        enc = encode_opndsgen_28000000(pc, instr, 0x29000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_28800000(pc, instr, 0x28800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_29800000(pc, instr, 0x29800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_2c000000(pc, instr, 0x2d000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_2c800000(pc, instr, 0x2c800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_2d800000(pc, instr, 0x2d800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_6c000000(pc, instr, 0x6d000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_6c800000(pc, instr, 0x6c800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_6d800000(pc, instr, 0x6d800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_a8000000(pc, instr, 0xa9000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_a8800000(pc, instr, 0xa8800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_a9800000(pc, instr, 0xa9800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_ac000000(pc, instr, 0xad000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_ac800000(pc, instr, 0xac800000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_ad800000(pc, instr, 0xad800000, di);
    case OP_str:
        enc = encode_opndsgen_38000400(pc, instr, 0xb8000400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38000c00(pc, instr, 0xb8000c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38200800(pc, instr, 0xb8200800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_39000000(pc, instr, 0xb9000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c000400(pc, instr, 0x3c000400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c000c00(pc, instr, 0x3c000c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c200800(pc, instr, 0x3c200800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c800400(pc, instr, 0x3c800400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c800c00(pc, instr, 0x3c800c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3ca00800(pc, instr, 0x3ca00800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3d000000(pc, instr, 0x3d000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3d800000(pc, instr, 0x3d800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_7c000400(pc, instr, 0x7c000400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_7c000c00(pc, instr, 0x7c000c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_7c200800(pc, instr, 0x7c200800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_7d000000(pc, instr, 0x7d000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_bc000400(pc, instr, 0xbc000400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_bc000c00(pc, instr, 0xbc000c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_bc200800(pc, instr, 0xbc200800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_bd000000(pc, instr, 0xbd000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_f8000400(pc, instr, 0xf8000400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_f8000c00(pc, instr, 0xf8000c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_f8200800(pc, instr, 0xf8200800, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_f9000000(pc, instr, 0xf9000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_fc000400(pc, instr, 0xfc000400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_fc000c00(pc, instr, 0xfc000c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_fc200800(pc, instr, 0xfc200800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_fd000000(pc, instr, 0xfd000000, di);
    case OP_strb:
        enc = encode_opndsgen_38000400(pc, instr, 0x38000400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38000c00(pc, instr, 0x38000c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38200800(pc, instr, 0x38200800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_39000000(pc, instr, 0x39000000, di);
    case OP_strh:
        enc = encode_opndsgen_38000400(pc, instr, 0x78000400, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38000c00(pc, instr, 0x78000c00, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_38200800(pc, instr, 0x78200800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_39000000(pc, instr, 0x79000000, di);
    case OP_sttr:
        enc = encode_opndsgen_38000000(pc, instr, 0xb8000800, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8000000(pc, instr, 0xf8000800, di);
    case OP_sttrb:
        return encode_opndsgen_38000000(pc, instr, 0x38000800, di);
    case OP_sttrh:
        return encode_opndsgen_38000000(pc, instr, 0x78000800, di);
    case OP_stur:
        enc = encode_opndsgen_38000000(pc, instr, 0xb8000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c000000(pc, instr, 0x3c000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_3c800000(pc, instr, 0x3c800000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_7c000000(pc, instr, 0x7c000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_bc000000(pc, instr, 0xbc000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_f8000000(pc, instr, 0xf8000000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_fc000000(pc, instr, 0xfc000000, di);
    case OP_sturb:
        return encode_opndsgen_38000000(pc, instr, 0x38000000, di);
    case OP_sturh:
        return encode_opndsgen_38000000(pc, instr, 0x78000000, di);
    case OP_stxp:
        enc = encode_opndsgen_88200000(pc, instr, 0x88200000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8200000(pc, instr, 0xc8200000, di);
    case OP_stxr:
        enc = encode_opndsgen_08000000(pc, instr, 0x88000000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_c8000000(pc, instr, 0xc8000000, di);
    case OP_stxrb:
        return encode_opndsgen_08000000(pc, instr, 0x08000000, di);
    case OP_stxrh:
        return encode_opndsgen_08000000(pc, instr, 0x48000000, di);
    case OP_sub:
        enc = encode_opndsgen_0b000000(pc, instr, 0x4b000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_0b200000(pc, instr, 0x4b200000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_11000000(pc, instr, 0x51000000, di);
    case OP_subs:
        enc = encode_opndsgen_0b000000(pc, instr, 0x6b000000, di);
        if (enc != ENCFAIL)
            return enc;
        enc = encode_opndsgen_2b200000(pc, instr, 0x6b200000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_31000000(pc, instr, 0x71000000, di);
    case OP_svc:
        return encode_opndsgen_d4000001(pc, instr, 0xd4000001, di);
    case OP_swp:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8208000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8208000, di);
    case OP_swpa:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8a08000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a08000, di);
    case OP_swpab:
        return encode_opndsgen_38200000(pc, instr, 0x38a08000, di);
    case OP_swpah:
        return encode_opndsgen_38200000(pc, instr, 0x78a08000, di);
    case OP_swpal:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8e08000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e08000, di);
    case OP_swpalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e08000, di);
    case OP_swpalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e08000, di);
    case OP_swpb:
        return encode_opndsgen_38200000(pc, instr, 0x38208000, di);
    case OP_swph:
        return encode_opndsgen_38200000(pc, instr, 0x78208000, di);
    case OP_swpl:
        enc = encode_opndsgen_38200000(pc, instr, 0xb8608000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8608000, di);
    case OP_swplb:
        return encode_opndsgen_38200000(pc, instr, 0x38608000, di);
    case OP_swplh:
        return encode_opndsgen_38200000(pc, instr, 0x78608000, di);
    case OP_sys:
        enc = encode_opndsgen_d5080000(pc, instr, 0xd5080000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_d5280000(pc, instr, 0xd5280000, di);
    case OP_tbnz:
        return encode_opnds_tbz(pc, instr, 0x37000000, di);
    case OP_tbz:
        return encode_opnds_tbz(pc, instr, 0x36000000, di);
    case OP_ubfm:
        enc = encode_opndsgen_13000000(pc, instr, 0x53000000, di);
        if (enc != ENCFAIL)
            return enc;
        return encode_opndsgen_93400000(pc, instr, 0xd3400000, di);
    case OP_udiv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac00800, di);
    case OP_umaddl:
        return encode_opndsgen_9b200000(pc, instr, 0x9ba00000, di);
    case OP_umsubl:
        return encode_opndsgen_9b200000(pc, instr, 0x9ba08000, di);
    case OP_umulh:
        return encode_opndsgen_9b400000(pc, instr, 0x9bc00000, di);
    case OP_wfe:
        return encode_opndsgen_d503201f(pc, instr, 0xd503205f, di);
    case OP_wfi:
        return encode_opndsgen_d503201f(pc, instr, 0xd503207f, di);
    case OP_yield:
        return encode_opndsgen_d503201f(pc, instr, 0xd503203f, di);
    }
    return ENCFAIL;
}
