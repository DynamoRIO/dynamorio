/* This file was generated by codec.py from codec.txt. */

static uint
encode_opndsgen_08000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem0(enc & 0xffe083e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w16(enc & 0xffff8000, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(enc & 0xffe0801f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x001f0000) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_08207c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 5 &&
        encode_opnd_w16p0(enc & 0xfffffc00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w16p1(enc & 0xfffffc00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem0p(enc & 0xffe0ffe0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_w16p0(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w16p1(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_w0p0(enc & 0xffe0fc1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_w0p1(enc & 0xffe0fc1f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_mem0p(enc & 0xffe0ffe0, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffe0ffff) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x001f0000) &&
            dst1 == (enc & 0x001f0000) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_08400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(enc & 0xffe0801f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xffe083e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ign16(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_08808000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem0(enc & 0xffe083e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(enc & 0xffe0801f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ign16(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_08a07c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w16(enc & 0xfffffc00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xffe0ffe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w16(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w0(enc & 0xffe0fc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem0(enc & 0xffe0ffe0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe0ffff) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001f0000) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0a000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0(enc & 0xff20001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(enc & 0xff2003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(enc & 0xff3f0000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_shift4(enc & 0x7fe00000, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm6(enc & 0x7f20fc00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xff3fffff) == 0);
        ASSERT((src3 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x00c00000) &&
            src3 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0b000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0(enc & 0xff20001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(enc & 0xff2003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(enc & 0xff3f0000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_shift3(enc & 0x7fe00000, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm6(enc & 0x7f20fc00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xff3fffff) == 0);
        ASSERT((src3 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x00c00000) &&
            src3 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0b200000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0sp(enc & 0xffe0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5sp(enc & 0xffe003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(enc & 0xffff0000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ext(enc & 0x7fe0e000, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_extam(enc & 0x7fe01c00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xffff1fff) == 0);
        ASSERT((src3 & 0xffffe3ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x0000e000) &&
            src3 == (enc & 0x00001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvm(enc & 0xfffff3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vmsz(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(enc & 0xfffff01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(enc & 0xfffff01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_vt2(enc & 0xfffff01f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_vt3(enc & 0xfffff01f, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        ASSERT((src3 & 0xbfffffe0) == 0);
        ASSERT((src4 & 0xbfffffe0) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x400003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f) &&
            src3 == (enc & 0x4000001f) &&
            src4 == (enc & 0x4000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c004000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvm(enc & 0xfffff3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vmsz(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(enc & 0xfffff01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(enc & 0xfffff01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_vt2(enc & 0xfffff01f, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        ASSERT((src3 & 0xbfffffe0) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x400003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f) &&
            src3 == (enc & 0x4000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c007000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_memvm(enc & 0xfffff3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vmsz(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(enc & 0xfffff01f, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x400003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c008000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_memvm(enc & 0xfffff3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vmsz(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(enc & 0xfffff01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(enc & 0xfffff01f, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x400003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 2 &&
        encode_opnd_vt0(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vt2(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_vt3(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvm(enc & 0xfffff3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x4000001f) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c404000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 2 &&
        encode_opnd_vt0(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vt2(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvm(enc & 0xfffff3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c407000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_vt0(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memvm(enc & 0xfffff3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x4000001f) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c408000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_vt0(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvm(enc & 0xfffff3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4, src5, src6;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 7 &&
        encode_opnd_memvm(enc & 0xffe0f3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vmsz(enc & 0xbfe0fc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(enc & 0xffe0f01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(enc & 0xffe0f01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_vt2(enc & 0xffe0f01f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_vt3(enc & 0xffe0f01f, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16imm(enc & 0xfffff000, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        ASSERT((src3 & 0xbfffffe0) == 0);
        ASSERT((src4 & 0xbfffffe0) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xbfe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x400003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f) &&
            src3 == (enc & 0x4000001f) &&
            src4 == (enc & 0x4000001f) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x401f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c804000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4, src5;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 6 &&
        encode_opnd_memvm(enc & 0xffe0f3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vmsz(enc & 0xbfe0fc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(enc & 0xffe0f01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(enc & 0xffe0f01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_vt2(enc & 0xffe0f01f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16imm(enc & 0xfffff000, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        ASSERT((src3 & 0xbfffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xbfe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x400003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f) &&
            src3 == (enc & 0x4000001f) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x401f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c807000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvm(enc & 0xffe0f3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vmsz(enc & 0xbfe0fc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(enc & 0xffe0f01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16imm(enc & 0xfffff000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x400003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x401f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0c808000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvm(enc & 0xffe0f3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vmsz(enc & 0xbfe0fc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vt0(enc & 0xffe0f01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_vt1(enc & 0xffe0f01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16imm(enc & 0xfffff000, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xbffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffff3ff) == 0);
        ASSERT((src1 & 0xbfffffe0) == 0);
        ASSERT((src2 & 0xbfffffe0) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xbfe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x400003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x00000c00) &&
            src1 == (enc & 0x4000001f) &&
            src2 == (enc & 0x4000001f) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x401f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0cc00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, dst4, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 4 &&
        encode_opnd_vt0(enc & 0xffe0f01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(enc & 0xffe0f01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vt2(enc & 0xffe0f01f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_vt3(enc & 0xffe0f01f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_memvm(enc & 0xffe0f3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(enc & 0xbfe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16imm(enc & 0xfffff000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xbfffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x4000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x401f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0cc04000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 4 &&
        encode_opnd_vt0(enc & 0xffe0f01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(enc & 0xffe0f01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_vt2(enc & 0xffe0f01f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvm(enc & 0xffe0f3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(enc & 0xbfe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16imm(enc & 0xfffff000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x401f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0cc07000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_vt0(enc & 0xffe0f01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvm(enc & 0xffe0f3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(enc & 0xbfe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16imm(enc & 0xfffff000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x401f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0cc08000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 4 &&
        encode_opnd_vt0(enc & 0xffe0f01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_vt1(enc & 0xffe0f01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvm(enc & 0xffe0f3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_vmsz(enc & 0xbfe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xbfe0f3e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16imm(enc & 0xfffff000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xbffffc1f) == 0);
        ASSERT((src1 & 0xfffff3ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x400003e0) &&
            src1 == (enc & 0x00000c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x401f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_memvs(enc & 0xbfffe3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffe01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index0(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d002000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0xbfffe3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffe01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfffe01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfffe01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index0(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffe3ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d004000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_memvs(enc & 0xbfffe7e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffe41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index1(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d006000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0xbfffe7e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffe41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfffe41f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfffe41f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index1(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffe7ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d008000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_memvs(enc & 0xbfffefe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d008400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_memvs(enc & 0xbfffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbffffc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d00a000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0xbfffefe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfffec1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfffec1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index2(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffefff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d00a400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0xbfffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbffffc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbffffc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbffffc1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index3(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d200000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_memvs(enc & 0xbfffe3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffe01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfffe01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index0(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffe3ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d202000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0xbfffe3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffe01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfffe01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfffe01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfffe01f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index0(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffe3ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d204000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_memvs(enc & 0xbfffe7e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffe41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfffe41f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index1(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffe7ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d206000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0xbfffe7e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffe41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfffe41f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfffe41f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfffe41f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index1(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffe7ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d208000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_memvs(enc & 0xbfffefe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfffec1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index2(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffefff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d208400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_memvs(enc & 0xbfffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbffffc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbffffc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index3(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d20a000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0xbfffefe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbfffec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfffec1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfffec1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfffec1f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index2(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffefff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d20a400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0xbfffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xbffffc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbffffc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbffffc1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbffffc1f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index3(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffe01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memvs(enc & 0xbfffe3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index0(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d402000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffe01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfffe01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfffe01f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvs(enc & 0xbfffe3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index0(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d404000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffe41f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memvs(enc & 0xbfffe7e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index1(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d406000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffe41f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfffe41f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfffe41f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvs(enc & 0xbfffe7e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index1(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d408000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffec1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memvs(enc & 0xbfffefe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d408400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbffffc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memvs(enc & 0xbfffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d40a000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffec1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfffec1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfffec1f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvs(enc & 0xbfffefe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d40a400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbffffc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbffffc1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbffffc1f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvs(enc & 0xbfffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d40c000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_dq0(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memvr(enc & 0xbfffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x4000001f) &&
            src0 == (enc & 0x00000fe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d40e000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 1 &&
        encode_opnd_dq0(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_dq0p2(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvr(enc & 0xbfffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        enc |= dst0 | dst1 | dst2 | src0;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            src0 == (enc & 0x00000fe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d600000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffe01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfffe01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvs(enc & 0xbfffe3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index0(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d602000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffe01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfffe01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfffe01f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(enc & 0xbfffe01f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvs(enc & 0xbfffe3e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index0(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d604000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffe41f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfffe41f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvs(enc & 0xbfffe7e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index1(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d606000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffe41f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfffe41f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfffe41f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(enc & 0xbfffe41f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvs(enc & 0xbfffe7e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index1(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001800))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d608000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffec1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfffec1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvs(enc & 0xbfffefe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d608400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbffffc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbffffc1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvs(enc & 0xbfffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d60a000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbfffec1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfffec1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfffec1f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(enc & 0xbfffec1f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvs(enc & 0xbfffefe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40001000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d60a400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 2 &&
        encode_opnd_q0(enc & 0xbffffc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbffffc1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbffffc1f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(enc & 0xbffffc1f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvs(enc & 0xbfffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x40000000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d60c000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_dq0(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvr(enc & 0xbfffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            src0 == (enc & 0x00000fe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d60e000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 1 &&
        encode_opnd_dq0(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_dq0p2(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_dq0p3(enc & 0xfffff01f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvr(enc & 0xbfffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xbfffffe0) == 0);
        ASSERT((src0 & 0xfffff01f) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x4000001f) &&
            src0 == (enc & 0x00000fe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index0(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16immvs(enc & 0xbfffe000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffe3ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d802000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4, src5;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 6 &&
        encode_opnd_memvs(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index0(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0xbfffe000, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffe3ff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001c00) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d804000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index1(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16immvs(enc & 0xbfffe400, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffe7ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001800) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d806000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4, src5;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 6 &&
        encode_opnd_memvs(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index1(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0xbfffe400, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffe7ff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001800) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d808000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index2(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16immvs(enc & 0xbfffec00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffefff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40001000) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d808400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_memvs(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_index3(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x16immvs(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xbfffffff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x40000000) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d80a000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4, src5;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 6 &&
        encode_opnd_memvs(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index2(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0xbfffec00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffefff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40001000) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0d80a400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4, src5;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 6 &&
        encode_opnd_memvs(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index3(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xbfffffff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x40000000) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index0(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0xbfffe000, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffe3ff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001c00) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da02000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4, src5, src6;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 7 &&
        encode_opnd_memvs(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index0(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0xbfffe000, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffe3ff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001c00) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da04000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index1(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0xbfffe400, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffe7ff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001800) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da06000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4, src5, src6;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 7 &&
        encode_opnd_memvs(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index1(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0xbfffe400, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffe7ff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001800) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da08000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index2(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0xbfffec00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffefff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40001000) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da08400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_memvs(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index3(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xbfffffff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x40000000) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da0a000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4, src5, src6;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 7 &&
        encode_opnd_memvs(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index2(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0xbfffec00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffefff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40001000) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0da0a400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4, src5, src6;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 7 &&
        encode_opnd_memvs(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index3(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xbfffffff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x40000000) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_memvs(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index0(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0xbfffe000, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xbfffe3ff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x40001c00) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc02000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1, src2, src3, src4, src5, src6;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 7 &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0e01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfe0e01f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index0(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0xbfffe000, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xbfffe3ff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x40001c00) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc04000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_memvs(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index1(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0xbfffe400, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xbfffe7ff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x40001800) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc06000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1, src2, src3, src4, src5, src6;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 7 &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0e41f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfe0e41f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index1(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0xbfffe400, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xbfffe7ff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x40001800) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc08000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_memvs(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index2(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0xbfffec00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xbfffefff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x40001000) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc08400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 5 &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_memvs(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_index3(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x16immvs(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xbfffffff) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x40000000) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc0a000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1, src2, src3, src4, src5, src6;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 7 &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0ec1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfe0ec1f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index2(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0xbfffec00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xbfffefff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x40001000) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc0a400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1, src2, src3, src4, src5, src6;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 7 &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0fc1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfe0fc1f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_memvs(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_index3(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x16immvs(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 6), &src6)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xfffffc1f) == 0);
        ASSERT((src4 & 0xbfffffff) == 0);
        ASSERT((src5 & 0xfffffc1f) == 0);
        ASSERT((src6 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2 | src3 | src4 | src5 | src6;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x000003e0) &&
            src4 == (enc & 0x40000000) &&
            src5 == (enc & 0x000003e0) &&
            src6 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc0c000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_dq0(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_memvrpost(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x16immvr(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0dc0e000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, src0, src1, src2;
    if (instr_num_dsts(instr) == 4 && instr_num_srcs(instr) == 3 &&
        encode_opnd_dq0(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_dq0p2(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_memvrpost(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x16immvr(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | src0 | src1 | src2;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2, src3, src4, src5;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 6 &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0e01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index0(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0xbfffe000, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfffe3ff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x40001c00) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de02000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, dst4, src0, src1, src2, src3, src4, src5, src6, src7;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 8 &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0e01f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfe0e01f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(enc & 0xbfe0e01f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_q0(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfe0e01f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_index0(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x5sp(enc & 0xbfe0e3e0, opcode, pc, instr_get_src(instr, 6), &src6) &&
        encode_opnd_x16immvs(enc & 0xbfffe000, opcode, pc, instr_get_src(instr, 7), &src7)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xbfffe3ff) == 0);
        ASSERT((src6 & 0xfffffc1f) == 0);
        ASSERT((src7 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2 | src3 | src4 | src5 | src6 | src7;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x40001c00) &&
            src6 == (enc & 0x000003e0) &&
            src7 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de04000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2, src3, src4, src5;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 6 &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0e41f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index1(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0xbfffe400, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfffe7ff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x40001800) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de06000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, dst4, src0, src1, src2, src3, src4, src5, src6, src7;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 8 &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0e41f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfe0e41f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(enc & 0xbfe0e41f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_q0(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfe0e41f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_index1(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x5sp(enc & 0xbfe0e7e0, opcode, pc, instr_get_src(instr, 6), &src6) &&
        encode_opnd_x16immvs(enc & 0xbfffe400, opcode, pc, instr_get_src(instr, 7), &src7)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xbfffe7ff) == 0);
        ASSERT((src6 & 0xfffffc1f) == 0);
        ASSERT((src7 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2 | src3 | src4 | src5 | src6 | src7;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x40001800) &&
            src6 == (enc & 0x000003e0) &&
            src7 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de08000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2, src3, src4, src5;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 6 &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0ec1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index2(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0xbfffec00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfffefff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x40001000) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de08400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2, src3, src4, src5;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 6 &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0fc1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_memvs(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_index3(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_x16immvs(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 5), &src5)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xbfffffff) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4 | src5;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x40000000) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de0a000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, dst4, src0, src1, src2, src3, src4, src5, src6, src7;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 8 &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0ec1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfe0ec1f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(enc & 0xbfe0ec1f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_q0(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfe0ec1f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_index2(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x5sp(enc & 0xbfe0efe0, opcode, pc, instr_get_src(instr, 6), &src6) &&
        encode_opnd_x16immvs(enc & 0xbfffec00, opcode, pc, instr_get_src(instr, 7), &src7)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xbfffefff) == 0);
        ASSERT((src6 & 0xfffffc1f) == 0);
        ASSERT((src7 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2 | src3 | src4 | src5 | src6 | src7;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x40001000) &&
            src6 == (enc & 0x000003e0) &&
            src7 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de0a400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, dst4, src0, src1, src2, src3, src4, src5, src6, src7;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 8 &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0p1(enc & 0xbfe0fc1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0p2(enc & 0xbfe0fc1f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_q0p3(enc & 0xbfe0fc1f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_q0(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q0p1(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_q0p2(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_q0p3(enc & 0xbfe0fc1f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_memvs(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 4), &src4) &&
        encode_opnd_index3(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 5), &src5) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 6), &src6) &&
        encode_opnd_x16immvs(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 7), &src7)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffffffe0) == 0);
        ASSERT((dst2 & 0xffffffe0) == 0);
        ASSERT((dst3 & 0xffffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        ASSERT((src5 & 0xbfffffff) == 0);
        ASSERT((src6 & 0xfffffc1f) == 0);
        ASSERT((src7 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2 | src3 | src4 | src5 | src6 | src7;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x0000001f) &&
            dst2 == (enc & 0x0000001f) &&
            dst3 == (enc & 0x0000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0) &&
            src5 == (enc & 0x40000000) &&
            src6 == (enc & 0x000003e0) &&
            src7 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de0c000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_dq0(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_memvrpost(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x16immvr(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_0de0e000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, dst3, dst4, src0, src1, src2;
    if (instr_num_dsts(instr) == 5 && instr_num_srcs(instr) == 3 &&
        encode_opnd_dq0(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_dq0p1(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_dq0p2(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_dq0p3(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 3), &dst3) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_dst(instr, 4), &dst4) &&
        encode_opnd_memvrpost(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xbfe0ffe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x16immvr(enc & 0xbffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xbfffffe0) == 0);
        ASSERT((dst1 & 0xbfffffe0) == 0);
        ASSERT((dst2 & 0xbfffffe0) == 0);
        ASSERT((dst3 & 0xbfffffe0) == 0);
        ASSERT((dst4 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | dst2 | dst3 | dst4 | src0 | src1 | src2;
        if (dst0 == (enc & 0x4000001f) &&
            dst1 == (enc & 0x4000001f) &&
            dst2 == (enc & 0x4000001f) &&
            dst3 == (enc & 0x4000001f) &&
            dst4 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_10000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(enc & 0x9f00001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_adr(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0x9f00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x60ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_11000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0sp(enc & 0xff80001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5sp(enc & 0xff8003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_imm12(enc & 0x7fbffc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_lsl(enc & 0x7f800000, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm12sh(enc & 0x7fc00000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0xffc003ff) == 0);
        ASSERT((src2 & 0xffffffff) == 0);
        ASSERT((src3 & 0xffbfffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x003ffc00) &&
            src2 == (enc & 0x00000000) &&
            src3 == (enc & 0x00400000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_12800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(enc & 0xff80001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_imm16(enc & 0xff9fffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_lsl(enc & 0xff800000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imm16sh(enc & 0xffe00000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe0001f) == 0);
        ASSERT((src1 & 0xffffffff) == 0);
        ASSERT((src2 & 0xff9fffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001fffe0) &&
            src1 == (enc & 0x00000000) &&
            src2 == (enc & 0x00600000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_13000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_immr(enc & 0xffff0000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imms(enc & 0xffc0fc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffc0ffff) == 0);
        ASSERT((src2 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x003f0000) &&
            src2 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_13800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(enc & 0xffe0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(enc & 0xffe003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w16(enc & 0xffff0000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imms(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_18000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(enc & 0xff00001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memlit(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xff00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_1a000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_wx0(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(enc & 0xffe0ffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_1a800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_wx0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(enc & 0xffff0c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_cond(enc & 0x7fe0fc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xffff0fff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x0000f000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_1ac04000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_w0(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(enc & 0xffe0ffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w16(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_1b000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_wx0(enc & 0xffe0801f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(enc & 0xffe083e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_wx10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0x7fff83ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x80007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_1c000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_s0(enc & 0xff00001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memlit(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xff00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_28000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x003f83e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_28400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x003f83e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_28800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7post(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_28c00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7post(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_29800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x003f83e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_29c00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x003f83e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2b200000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0(enc & 0xffe0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5sp(enc & 0xffe003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(enc & 0xffff0000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ext(enc & 0x7fe0e000, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_extam(enc & 0x7fe01c00, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xffff1fff) == 0);
        ASSERT((src3 & 0xffffe3ff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x0000e000) &&
            src3 == (enc & 0x00001c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2c000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_s10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x003f83e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2c400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_s0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x003f83e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2c800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7post(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_s0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_s10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2cc00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_s0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7post(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2d800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_s0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_s10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x003f83e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_2dc00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_s0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x003f83e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_31000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx0(enc & 0xff80001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5sp(enc & 0xff8003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_imm12(enc & 0x7fbffc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_lsl(enc & 0x7f800000, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm12sh(enc & 0x7fc00000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0xffc003ff) == 0);
        ASSERT((src2 & 0xffffffff) == 0);
        ASSERT((src3 & 0xffbfffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x003ffc00) &&
            src2 == (enc & 0x00000000) &&
            src3 == (enc & 0x00400000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38000400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38000c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38200000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_w0(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xffe0ffe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w16(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_mem0(enc & 0xffe0ffe0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38200800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38400400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38400c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_w0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38600800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38800400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38800c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_38a00800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_39000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_39400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_39800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3a400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx5(enc & 0xffe00ff0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_wx16(enc & 0xffff0c10, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_nzcv(enc & 0x7fe00c1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_cond(enc & 0x7fe0fc10, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0x7fe0ffff) == 0);
        ASSERT((src2 & 0xfffffff0) == 0);
        ASSERT((src3 & 0xffff0fff) == 0);
        enc |= src0 | src1 | src2 | src3;
        if (src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x801f0000) &&
            src2 == (enc & 0x0000000f) &&
            src3 == (enc & 0x0000f000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3a400800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 4 &&
        encode_opnd_wx5(enc & 0xffe00ff0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_imm5(enc & 0x7fff0c10, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_nzcv(enc & 0x7fe00c1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_cond(enc & 0x7fe0fc10, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((src0 & 0x7ffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xfffffff0) == 0);
        ASSERT((src3 & 0xffff0fff) == 0);
        enc |= src0 | src1 | src2 | src3;
        if (src0 == (enc & 0x800003e0) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x0000000f) &&
            src3 == (enc & 0x0000f000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_b0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c000400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_b0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c000c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_b0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c200800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_b0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_b0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c400400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_b0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c400c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_b0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c600800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_b0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c800400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9qpost(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3c800c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9q(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3ca00800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memregq(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_b0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3cc00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_q0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3cc00400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_q0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9qpost(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3cc00c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_q0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9q(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3ce00800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_q0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memregq(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3d000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_b0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3d400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_b0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3d800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12q(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_3dc00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_q0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12q(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_48207c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2, src3, src4;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 5 &&
        encode_opnd_x16p0(enc & 0xfffffc00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x16p1(enc & 0xfffffc00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem0p(enc & 0xffe0ffe0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_x16p0(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x16p1(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x0p0(enc & 0xffe0fc1f, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_x0p1(enc & 0xffe0fc1f, opcode, pc, instr_get_src(instr, 3), &src3) &&
        encode_opnd_mem0p(enc & 0xffe0ffe0, opcode, pc, instr_get_src(instr, 4), &src4)) {
        ASSERT((dst0 & 0xffe0ffff) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffffffe0) == 0);
        ASSERT((src3 & 0xffffffe0) == 0);
        ASSERT((src4 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2 | src3 | src4;
        if (dst0 == (enc & 0x001f0000) &&
            dst1 == (enc & 0x001f0000) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x0000001f) &&
            src3 == (enc & 0x0000001f) &&
            src4 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_58000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(enc & 0xff00001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memlit(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xff00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_5ac00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_wx0(enc & 0xfffffc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_wx5(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0x7fffffe0) == 0);
        ASSERT((src0 & 0x7ffffc1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x8000001f) &&
            src0 == (enc & 0x800003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_5ac00800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_w0(enc & 0xfffffc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_5c000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_d0(enc & 0xff00001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memlit(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xff00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_68c00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7post(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_69400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x003f83e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_69c00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x003f83e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6c000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_d10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x003f83e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6c400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_d0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x003f83e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6c800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7post(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_d0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_d10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6cc00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_d0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7post(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6d800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_d0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_d10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x003f83e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_6dc00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_d0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x003f83e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_72800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_w0(enc & 0xff80001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w0(enc & 0xff80001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_imm16(enc & 0xff9fffe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_lsl(enc & 0xff800000, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm16sh(enc & 0xffe00000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffe0001f) == 0);
        ASSERT((src2 & 0xffffffff) == 0);
        ASSERT((src3 & 0xff9fffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x001fffe0) &&
            src2 == (enc & 0x00000000) &&
            src3 == (enc & 0x00600000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_h0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c000400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_h0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c000c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_h0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c200800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_h0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_h0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c400400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_h0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c400c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_h0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7c600800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_h0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7d000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_h0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_7d400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_h0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_88200000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem0p(enc & 0xffe083e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w16(enc & 0xffff8000, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_w0(enc & 0xffe0801f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x001f0000) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_88600000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_w0(enc & 0xffe0801f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w10(enc & 0xffe0fc00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem0p(enc & 0xffe083e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign16(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_90000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(enc & 0x9f00001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_adrp(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0x9f00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x60ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_92800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(enc & 0xff80001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_imm16(enc & 0xff9fffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_lsl(enc & 0xff800000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imm16sh(enc & 0xffe00000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe0001f) == 0);
        ASSERT((src1 & 0xffffffff) == 0);
        ASSERT((src2 & 0xff9fffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001fffe0) &&
            src1 == (enc & 0x00000000) &&
            src2 == (enc & 0x00600000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_93400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_immr(enc & 0xffff0000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imms(enc & 0xffc0fc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffc0ffff) == 0);
        ASSERT((src2 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x003f0000) &&
            src2 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_93c00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(enc & 0xffe0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5(enc & 0xffe003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x16(enc & 0xffff0000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_imms(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffff03ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x0000fc00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_9ac04c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_w0(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(enc & 0xffe0ffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x16(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_9b200000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(enc & 0xffe0801f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w5(enc & 0xffe083e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_w16(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_9b400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(enc & 0xffe0801f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5(enc & 0xffe083e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x16(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ign10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        ASSERT((src2 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000) &&
            src2 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_9c000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_q0(enc & 0xff00001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memlit(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xff00001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_a8000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x003f83e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_a8800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7post(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_a9800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x003f83e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_ac000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | src0 | src1;
        if (dst0 == (enc & 0x003f83e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_ac400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 1 &&
        encode_opnd_q0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        enc |= dst0 | dst1 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x003f83e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_ac800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7post(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_acc00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_q0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7post(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_ad800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 4 &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_q0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_q10(enc & 0xffc07c00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffc07c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        ASSERT((src3 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x003f83e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x000003e0) &&
            src3 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_adc00000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, dst2, src0, src1, src2;
    if (instr_num_dsts(instr) == 3 && instr_num_srcs(instr) == 3 &&
        encode_opnd_q0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_q10(enc & 0xffc07c00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_dst(instr, 2), &dst2) &&
        encode_opnd_mem7(enc & 0xffff83e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffc003e0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem7off(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((dst2 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffc07c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffc07fff) == 0);
        enc |= dst0 | dst1 | dst2 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            dst2 == (enc & 0x000003e0) &&
            src0 == (enc & 0x003f83e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x003f8000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc000400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_s0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc000c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_s0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc200800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_s0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc400400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_s0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc400c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_s0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bc600800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_s0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bd000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_s0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_bd400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_s0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem0(enc & 0xffe083e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w16(enc & 0xffff8000, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(enc & 0xffe0801f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x001f0000) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8200000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_mem0p(enc & 0xffe083e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_w16(enc & 0xffff8000, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(enc & 0xffe0801f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xffe0ffff) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x001f0000) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x0(enc & 0xffe0801f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xffe083e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ign16(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8600000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_x0(enc & 0xffe0801f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x10(enc & 0xffe0fc00, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem0p(enc & 0xffe083e0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign16(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xffff83ff) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xffe0ffff) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x00007c00) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8808000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem0(enc & 0xffe083e0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(enc & 0xffe0801f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_ign10(enc & 0xffe0fc00, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_ign16(enc & 0xffff8000, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffff83ff) == 0);
        ASSERT((src2 & 0xffe0ffff) == 0);
        enc |= dst0 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00007c00) &&
            src2 == (enc & 0x001f0000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_c8a07c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_x16(enc & 0xfffffc00, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xffe0ffe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x16(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x0(enc & 0xffe0fc1f, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem0(enc & 0xffe0ffe0, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe0ffff) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        ASSERT((src2 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001f0000) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x0000001f) &&
            src2 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d4000001(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint src0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 1 &&
        encode_opnd_imm16(enc & 0xffffffff, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((src0 & 0xffe0001f) == 0);
        enc |= src0;
        if (src0 == (enc & 0x001fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d503201f(byte *pc, instr_t *instr, uint enc)
{
    return enc;
}

static uint
encode_opndsgen_d503305f(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint src0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 1 &&
        encode_opnd_imm4(enc & 0xffffffff, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((src0 & 0xfffff0ff) == 0);
        enc |= src0;
        if (src0 == (enc & 0x00000f00))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d5080000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint src0, src1;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 2 &&
        encode_opnd_sysops(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x0(enc & 0xfff8001f, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((src0 & 0xfff8001f) == 0);
        ASSERT((src1 & 0xffffffe0) == 0);
        enc |= src0 | src1;
        if (src0 == (enc & 0x0007ffe0) &&
            src1 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d5280000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(enc & 0xfff8001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_sysops(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfff8001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x0007ffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d5300000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(enc & 0xfff0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_sysreg(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfff0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d61f0000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint src0;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x5(enc & 0xffffffff, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((src0 & 0xfffffc1f) == 0);
        enc |= src0;
        if (src0 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_d8000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint src0, src1;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 2 &&
        encode_opnd_prfop(enc & 0xff00001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_memlit(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xff00001f) == 0);
        enc |= src0 | src1;
        if (src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x00ffffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_dac00800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_x0(enc & 0xfffffc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f2800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0, src1, src2, src3;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 4 &&
        encode_opnd_x0(enc & 0xff80001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(enc & 0xff80001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_imm16(enc & 0xff9fffe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_lsl(enc & 0xff800000, opcode, pc, instr_get_src(instr, 2), &src2) &&
        encode_opnd_imm16sh(enc & 0xffe00000, opcode, pc, instr_get_src(instr, 3), &src3)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffe0001f) == 0);
        ASSERT((src2 & 0xffffffff) == 0);
        ASSERT((src3 & 0xff9fffff) == 0);
        enc |= dst0 | src0 | src1 | src2 | src3;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x001fffe0) &&
            src2 == (enc & 0x00000000) &&
            src3 == (enc & 0x00600000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8000400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8000c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8200000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 2 &&
        encode_opnd_x0(enc & 0xffe0fc1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem0(enc & 0xffe0ffe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_x16(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_mem0(enc & 0xffe0ffe0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe0ffff) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        enc |= dst0 | dst1 | src0 | src1;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001f0000) &&
            src1 == (enc & 0x000003e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8200800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint src0, src1;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 2 &&
        encode_opnd_prfop(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_prf9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffe00c1f) == 0);
        enc |= src0 | src1;
        if (src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f8a00800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint src0, src1;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 2 &&
        encode_opnd_prfop(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_prfreg(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffe00c1f) == 0);
        enc |= src0 | src1;
        if (src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f9000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_f9800000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint src0, src1;
    if (instr_num_dsts(instr) == 0 && instr_num_srcs(instr) == 2 &&
        encode_opnd_prfop(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_prf12(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 1), &src1)) {
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xffc0001f) == 0);
        enc |= src0 | src1;
        if (src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc000400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_d0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xfffffc1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x000003e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc000c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_d0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x001ff3e0) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x0000001f) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc200800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d0(enc & 0xffe00c1f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffe00c1f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x001ff3e0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_d0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc400400(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_d0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9post(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xfffffc1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x000003e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc400c00(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, dst1, src0, src1, src2;
    if (instr_num_dsts(instr) == 2 && instr_num_srcs(instr) == 3 &&
        encode_opnd_d0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_dst(instr, 1), &dst1) &&
        encode_opnd_mem9(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0) &&
        encode_opnd_x5sp(enc & 0xffe00fe0, opcode, pc, instr_get_src(instr, 1), &src1) &&
        encode_opnd_mem9off(enc & 0xfffffc00, opcode, pc, instr_get_src(instr, 2), &src2)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((dst1 & 0xfffffc1f) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        ASSERT((src1 & 0xfffffc1f) == 0);
        ASSERT((src2 & 0xffe00fff) == 0);
        enc |= dst0 | dst1 | src0 | src1 | src2;
        if (dst0 == (enc & 0x0000001f) &&
            dst1 == (enc & 0x000003e0) &&
            src0 == (enc & 0x001ff3e0) &&
            src1 == (enc & 0x000003e0) &&
            src2 == (enc & 0x001ff000))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fc600800(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_d0(enc & 0xffe00c1f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_memreg(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffe00c1f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x001ff3e0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fd000000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_d0(enc & 0xffc0001f, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffc0001f) == 0);
        ASSERT((src0 & 0xffffffe0) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x003fffe0) &&
            src0 == (enc & 0x0000001f))
            return enc;
    }
    return ENCFAIL;
}

static uint
encode_opndsgen_fd400000(byte *pc, instr_t *instr, uint enc)
{
    int opcode = instr->opcode;
    uint dst0, src0;
    if (instr_num_dsts(instr) == 1 && instr_num_srcs(instr) == 1 &&
        encode_opnd_d0(enc & 0xffc0001f, opcode, pc, instr_get_dst(instr, 0), &dst0) &&
        encode_opnd_mem12(enc & 0xffffffe0, opcode, pc, instr_get_src(instr, 0), &src0)) {
        ASSERT((dst0 & 0xffffffe0) == 0);
        ASSERT((src0 & 0xffc0001f) == 0);
        enc |= dst0 | src0;
        if (dst0 == (enc & 0x0000001f) &&
            src0 == (enc & 0x003fffe0))
            return enc;
    }
    return ENCFAIL;
}

static uint
encoder(byte *pc, instr_t *instr)
{
    uint enc;
    (void)enc;
    switch (instr->opcode) {
    case OP_adc:
        return encode_opndsgen_1a000000(pc, instr, 0x1a000000);
    case OP_adcs:
        return encode_opndsgen_1a000000(pc, instr, 0x3a000000);
    case OP_add:
        if ((enc = encode_opndsgen_0b000000(pc, instr, 0x0b000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0b000000(pc, instr, 0x8b000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0b200000(pc, instr, 0x0b200000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_11000000(pc, instr, 0x11000000);
    case OP_adds:
        if ((enc = encode_opndsgen_0b000000(pc, instr, 0x2b000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0b000000(pc, instr, 0xab000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_2b200000(pc, instr, 0x2b200000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_31000000(pc, instr, 0x31000000);
    case OP_adr:
        return encode_opndsgen_10000000(pc, instr, 0x10000000);
    case OP_adrp:
        return encode_opndsgen_90000000(pc, instr, 0x90000000);
    case OP_and:
        if ((enc = encode_opnds_logic_imm(pc, instr, 0x12000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0a000000(pc, instr, 0x0a000000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0x8a000000);
    case OP_ands:
        if ((enc = encode_opnds_logic_imm(pc, instr, 0x72000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0a000000(pc, instr, 0x6a000000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0xea000000);
    case OP_asrv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac02800);
    case OP_b:
        return encode_opnds_b(pc, instr, 0x14000000);
    case OP_bcond:
        return encode_opnds_bcond(pc, instr, 0x54000000);
    case OP_bfm:
        if ((enc = encode_opndsgen_13000000(pc, instr, 0x33000000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_93400000(pc, instr, 0xb3400000);
    case OP_bic:
        if ((enc = encode_opndsgen_0a000000(pc, instr, 0x0a200000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0x8a200000);
    case OP_bics:
        if ((enc = encode_opndsgen_0a000000(pc, instr, 0x6a200000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0xea200000);
    case OP_bl:
        return encode_opnds_b(pc, instr, 0x94000000);
    case OP_blr:
        return encode_opndsgen_d61f0000(pc, instr, 0xd63f0000);
    case OP_br:
        return encode_opndsgen_d61f0000(pc, instr, 0xd61f0000);
    case OP_brk:
        return encode_opndsgen_d4000001(pc, instr, 0xd4200000);
    case OP_cas:
        if ((enc = encode_opndsgen_08a07c00(pc, instr, 0x88a07c00)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8a07c00(pc, instr, 0xc8a07c00);
    case OP_casa:
        if ((enc = encode_opndsgen_08a07c00(pc, instr, 0x88e07c00)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8a07c00(pc, instr, 0xc8e07c00);
    case OP_casab:
        return encode_opndsgen_08a07c00(pc, instr, 0x08e07c00);
    case OP_casah:
        return encode_opndsgen_08a07c00(pc, instr, 0x48e07c00);
    case OP_casal:
        if ((enc = encode_opndsgen_08a07c00(pc, instr, 0x88e0fc00)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8a07c00(pc, instr, 0xc8e0fc00);
    case OP_casalb:
        return encode_opndsgen_08a07c00(pc, instr, 0x08e0fc00);
    case OP_casalh:
        return encode_opndsgen_08a07c00(pc, instr, 0x48e0fc00);
    case OP_casb:
        return encode_opndsgen_08a07c00(pc, instr, 0x08a07c00);
    case OP_cash:
        return encode_opndsgen_08a07c00(pc, instr, 0x48a07c00);
    case OP_casl:
        if ((enc = encode_opndsgen_08a07c00(pc, instr, 0x88a0fc00)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8a07c00(pc, instr, 0xc8a0fc00);
    case OP_caslb:
        return encode_opndsgen_08a07c00(pc, instr, 0x08a0fc00);
    case OP_caslh:
        return encode_opndsgen_08a07c00(pc, instr, 0x48a0fc00);
    case OP_casp:
        if ((enc = encode_opndsgen_08207c00(pc, instr, 0x08207c00)) != ENCFAIL)
            return enc;
        return encode_opndsgen_48207c00(pc, instr, 0x48207c00);
    case OP_caspa:
        if ((enc = encode_opndsgen_08207c00(pc, instr, 0x08607c00)) != ENCFAIL)
            return enc;
        return encode_opndsgen_48207c00(pc, instr, 0x48607c00);
    case OP_caspal:
        if ((enc = encode_opndsgen_08207c00(pc, instr, 0x0860fc00)) != ENCFAIL)
            return enc;
        return encode_opndsgen_48207c00(pc, instr, 0x4860fc00);
    case OP_caspl:
        if ((enc = encode_opndsgen_08207c00(pc, instr, 0x0820fc00)) != ENCFAIL)
            return enc;
        return encode_opndsgen_48207c00(pc, instr, 0x4820fc00);
    case OP_cbnz:
        return encode_opnds_cbz(pc, instr, 0x35000000);
    case OP_cbz:
        return encode_opnds_cbz(pc, instr, 0x34000000);
    case OP_ccmn:
        if ((enc = encode_opndsgen_3a400000(pc, instr, 0x3a400000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_3a400800(pc, instr, 0x3a400800);
    case OP_ccmp:
        if ((enc = encode_opndsgen_3a400000(pc, instr, 0x7a400000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_3a400800(pc, instr, 0x7a400800);
    case OP_clrex:
        return encode_opndsgen_d503305f(pc, instr, 0xd503305f);
    case OP_cls:
        return encode_opndsgen_5ac00000(pc, instr, 0x5ac01400);
    case OP_clz:
        return encode_opndsgen_5ac00000(pc, instr, 0x5ac01000);
    case OP_crc32b:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac04000);
    case OP_crc32cb:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac05000);
    case OP_crc32ch:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac05400);
    case OP_crc32cw:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac05800);
    case OP_crc32cx:
        return encode_opndsgen_9ac04c00(pc, instr, 0x9ac05c00);
    case OP_crc32h:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac04400);
    case OP_crc32w:
        return encode_opndsgen_1ac04000(pc, instr, 0x1ac04800);
    case OP_crc32x:
        return encode_opndsgen_9ac04c00(pc, instr, 0x9ac04c00);
    case OP_csel:
        return encode_opndsgen_1a800000(pc, instr, 0x1a800000);
    case OP_csinc:
        return encode_opndsgen_1a800000(pc, instr, 0x1a800400);
    case OP_csinv:
        return encode_opndsgen_1a800000(pc, instr, 0x5a800000);
    case OP_csneg:
        return encode_opndsgen_1a800000(pc, instr, 0x5a800400);
    case OP_dmb:
        return encode_opndsgen_d503305f(pc, instr, 0xd50330bf);
    case OP_dsb:
        return encode_opndsgen_d503305f(pc, instr, 0xd503309f);
    case OP_eon:
        if ((enc = encode_opndsgen_0a000000(pc, instr, 0x4a200000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0xca200000);
    case OP_eor:
        if ((enc = encode_opnds_logic_imm(pc, instr, 0x52000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0a000000(pc, instr, 0x4a000000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0xca000000);
    case OP_extr:
        if ((enc = encode_opndsgen_13800000(pc, instr, 0x13800000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_93c00000(pc, instr, 0x93c00000);
    case OP_hlt:
        return encode_opndsgen_d4000001(pc, instr, 0xd4400000);
    case OP_hvc:
        return encode_opndsgen_d4000001(pc, instr, 0xd4000002);
    case OP_isb:
        return encode_opndsgen_d503305f(pc, instr, 0xd50330df);
    case OP_ld1:
        if ((enc = encode_opndsgen_0c400000(pc, instr, 0x0c402000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c404000(pc, instr, 0x0c406000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c407000(pc, instr, 0x0c407000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c408000(pc, instr, 0x0c40a000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0cc00000(pc, instr, 0x0cc02000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0cc04000(pc, instr, 0x0cc06000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0cc07000(pc, instr, 0x0cc07000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0cc08000(pc, instr, 0x0cc0a000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d400000(pc, instr, 0x0d400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d404000(pc, instr, 0x0d404000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d408000(pc, instr, 0x0d408000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d408400(pc, instr, 0x0d408400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc00000(pc, instr, 0x0dc00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc04000(pc, instr, 0x0dc04000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc08000(pc, instr, 0x0dc08000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0dc08400(pc, instr, 0x0dc08400);
    case OP_ld1r:
        if ((enc = encode_opndsgen_0d40c000(pc, instr, 0x0d40c000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc0c000(pc, instr, 0x0dc0c000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc0c000(pc, instr, 0x0dc0c400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc0c000(pc, instr, 0x0dc0c800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0dc0c000(pc, instr, 0x0dc0cc00);
    case OP_ld2:
        if ((enc = encode_opndsgen_0c408000(pc, instr, 0x0c408000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0cc08000(pc, instr, 0x0cc08000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d600000(pc, instr, 0x0d600000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d604000(pc, instr, 0x0d604000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d608000(pc, instr, 0x0d608000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d608400(pc, instr, 0x0d608400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de00000(pc, instr, 0x0de00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de04000(pc, instr, 0x0de04000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de08000(pc, instr, 0x0de08000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0de08400(pc, instr, 0x0de08400);
    case OP_ld2r:
        if ((enc = encode_opndsgen_0d60c000(pc, instr, 0x0d60c000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de0c000(pc, instr, 0x0de0c000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de0c000(pc, instr, 0x0de0c400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de0c000(pc, instr, 0x0de0c800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0de0c000(pc, instr, 0x0de0cc00);
    case OP_ld3:
        if ((enc = encode_opndsgen_0c404000(pc, instr, 0x0c404000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0cc04000(pc, instr, 0x0cc04000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d402000(pc, instr, 0x0d402000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d406000(pc, instr, 0x0d406000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d40a000(pc, instr, 0x0d40a000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d40a400(pc, instr, 0x0d40a400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc02000(pc, instr, 0x0dc02000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc06000(pc, instr, 0x0dc06000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc0a000(pc, instr, 0x0dc0a000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0dc0a400(pc, instr, 0x0dc0a400);
    case OP_ld3r:
        if ((enc = encode_opndsgen_0d40e000(pc, instr, 0x0d40e000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc0e000(pc, instr, 0x0dc0e000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc0e000(pc, instr, 0x0dc0e400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0dc0e000(pc, instr, 0x0dc0e800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0dc0e000(pc, instr, 0x0dc0ec00);
    case OP_ld4:
        if ((enc = encode_opndsgen_0c400000(pc, instr, 0x0c400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0cc00000(pc, instr, 0x0cc00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d602000(pc, instr, 0x0d602000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d606000(pc, instr, 0x0d606000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d60a000(pc, instr, 0x0d60a000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d60a400(pc, instr, 0x0d60a400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de02000(pc, instr, 0x0de02000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de06000(pc, instr, 0x0de06000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de0a000(pc, instr, 0x0de0a000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0de0a400(pc, instr, 0x0de0a400);
    case OP_ld4r:
        if ((enc = encode_opndsgen_0d60e000(pc, instr, 0x0d60e000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de0e000(pc, instr, 0x0de0e000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de0e000(pc, instr, 0x0de0e400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0de0e000(pc, instr, 0x0de0e800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0de0e000(pc, instr, 0x0de0ec00);
    case OP_ldadd:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8200000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8200000);
    case OP_ldadda:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8a00000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a00000);
    case OP_ldaddab:
        return encode_opndsgen_38200000(pc, instr, 0x38a00000);
    case OP_ldaddah:
        return encode_opndsgen_38200000(pc, instr, 0x78a00000);
    case OP_ldaddal:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8e00000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e00000);
    case OP_ldaddalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e00000);
    case OP_ldaddalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e00000);
    case OP_ldaddb:
        return encode_opndsgen_38200000(pc, instr, 0x38200000);
    case OP_ldaddh:
        return encode_opndsgen_38200000(pc, instr, 0x78200000);
    case OP_ldaddl:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8600000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8600000);
    case OP_ldaddlb:
        return encode_opndsgen_38200000(pc, instr, 0x38600000);
    case OP_ldaddlh:
        return encode_opndsgen_38200000(pc, instr, 0x78600000);
    case OP_ldar:
        if ((enc = encode_opndsgen_08400000(pc, instr, 0x88c08000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8400000(pc, instr, 0xc8c08000);
    case OP_ldarb:
        return encode_opndsgen_08400000(pc, instr, 0x08c08000);
    case OP_ldarh:
        return encode_opndsgen_08400000(pc, instr, 0x48c08000);
    case OP_ldaxp:
        if ((enc = encode_opndsgen_88600000(pc, instr, 0x88608000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8600000(pc, instr, 0xc8608000);
    case OP_ldaxr:
        if ((enc = encode_opndsgen_08400000(pc, instr, 0x88408000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8400000(pc, instr, 0xc8408000);
    case OP_ldaxrb:
        return encode_opndsgen_08400000(pc, instr, 0x08408000);
    case OP_ldaxrh:
        return encode_opndsgen_08400000(pc, instr, 0x48408000);
    case OP_ldclr:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8201000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8201000);
    case OP_ldclra:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8a01000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a01000);
    case OP_ldclrab:
        return encode_opndsgen_38200000(pc, instr, 0x38a01000);
    case OP_ldclrah:
        return encode_opndsgen_38200000(pc, instr, 0x78a01000);
    case OP_ldclral:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8e01000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e01000);
    case OP_ldclralb:
        return encode_opndsgen_38200000(pc, instr, 0x38e01000);
    case OP_ldclralh:
        return encode_opndsgen_38200000(pc, instr, 0x78e01000);
    case OP_ldclrb:
        return encode_opndsgen_38200000(pc, instr, 0x38201000);
    case OP_ldclrh:
        return encode_opndsgen_38200000(pc, instr, 0x78201000);
    case OP_ldclrl:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8601000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8601000);
    case OP_ldclrlb:
        return encode_opndsgen_38200000(pc, instr, 0x38601000);
    case OP_ldclrlh:
        return encode_opndsgen_38200000(pc, instr, 0x78601000);
    case OP_ldeor:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8202000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8202000);
    case OP_ldeora:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8a02000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a02000);
    case OP_ldeorab:
        return encode_opndsgen_38200000(pc, instr, 0x38a02000);
    case OP_ldeorah:
        return encode_opndsgen_38200000(pc, instr, 0x78a02000);
    case OP_ldeoral:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8e02000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e02000);
    case OP_ldeoralb:
        return encode_opndsgen_38200000(pc, instr, 0x38e02000);
    case OP_ldeoralh:
        return encode_opndsgen_38200000(pc, instr, 0x78e02000);
    case OP_ldeorb:
        return encode_opndsgen_38200000(pc, instr, 0x38202000);
    case OP_ldeorh:
        return encode_opndsgen_38200000(pc, instr, 0x78202000);
    case OP_ldeorl:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8602000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8602000);
    case OP_ldeorlb:
        return encode_opndsgen_38200000(pc, instr, 0x38602000);
    case OP_ldeorlh:
        return encode_opndsgen_38200000(pc, instr, 0x78602000);
    case OP_ldnp:
        if ((enc = encode_opndsgen_28400000(pc, instr, 0x28400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_2c400000(pc, instr, 0x2c400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_69400000(pc, instr, 0xa8400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_6c400000(pc, instr, 0x6c400000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_ac400000(pc, instr, 0xac400000);
    case OP_ldp:
        if ((enc = encode_opndsgen_28400000(pc, instr, 0x29400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_28c00000(pc, instr, 0x28c00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_29c00000(pc, instr, 0x29c00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_2c400000(pc, instr, 0x2d400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_2cc00000(pc, instr, 0x2cc00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_2dc00000(pc, instr, 0x2dc00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_68c00000(pc, instr, 0xa8c00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_69400000(pc, instr, 0xa9400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_69c00000(pc, instr, 0xa9c00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_6c400000(pc, instr, 0x6d400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_6cc00000(pc, instr, 0x6cc00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_6dc00000(pc, instr, 0x6dc00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_ac400000(pc, instr, 0xad400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_acc00000(pc, instr, 0xacc00000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_adc00000(pc, instr, 0xadc00000);
    case OP_ldpsw:
        if ((enc = encode_opndsgen_68c00000(pc, instr, 0x68c00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_69400000(pc, instr, 0x69400000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_69c00000(pc, instr, 0x69c00000);
    case OP_ldr:
        if ((enc = encode_opndsgen_18000000(pc, instr, 0x18000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_1c000000(pc, instr, 0x1c000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38400400(pc, instr, 0xb8400400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38400c00(pc, instr, 0xb8400c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38600800(pc, instr, 0xb8600800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38800400(pc, instr, 0xf8400400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38800c00(pc, instr, 0xf8400c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38a00800(pc, instr, 0xf8600800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_39400000(pc, instr, 0xb9400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_39800000(pc, instr, 0xf9400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c400400(pc, instr, 0x3c400400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c400c00(pc, instr, 0x3c400c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c600800(pc, instr, 0x3c600800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3cc00400(pc, instr, 0x3cc00400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3cc00c00(pc, instr, 0x3cc00c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3ce00800(pc, instr, 0x3ce00800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3d400000(pc, instr, 0x3d400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3dc00000(pc, instr, 0x3dc00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_58000000(pc, instr, 0x58000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_5c000000(pc, instr, 0x5c000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_7c400400(pc, instr, 0x7c400400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_7c400c00(pc, instr, 0x7c400c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_7c600800(pc, instr, 0x7c600800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_7d400000(pc, instr, 0x7d400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_9c000000(pc, instr, 0x9c000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_bc400400(pc, instr, 0xbc400400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_bc400c00(pc, instr, 0xbc400c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_bc600800(pc, instr, 0xbc600800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_bd400000(pc, instr, 0xbd400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_fc400400(pc, instr, 0xfc400400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_fc400c00(pc, instr, 0xfc400c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_fc600800(pc, instr, 0xfc600800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_fd400000(pc, instr, 0xfd400000);
    case OP_ldrb:
        if ((enc = encode_opndsgen_38400400(pc, instr, 0x38400400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38400c00(pc, instr, 0x38400c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38600800(pc, instr, 0x38600800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_39400000(pc, instr, 0x39400000);
    case OP_ldrh:
        if ((enc = encode_opndsgen_38400400(pc, instr, 0x78400400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38400c00(pc, instr, 0x78400c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38600800(pc, instr, 0x78600800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_39400000(pc, instr, 0x79400000);
    case OP_ldrsb:
        if ((enc = encode_opndsgen_38400400(pc, instr, 0x38c00400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38400c00(pc, instr, 0x38c00c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38600800(pc, instr, 0x38e00800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38800400(pc, instr, 0x38800400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38800c00(pc, instr, 0x38800c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38a00800(pc, instr, 0x38a00800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_39400000(pc, instr, 0x39c00000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_39800000(pc, instr, 0x39800000);
    case OP_ldrsh:
        if ((enc = encode_opndsgen_38400400(pc, instr, 0x78c00400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38400c00(pc, instr, 0x78c00c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38600800(pc, instr, 0x78e00800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38800400(pc, instr, 0x78800400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38800c00(pc, instr, 0x78800c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38a00800(pc, instr, 0x78a00800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_39400000(pc, instr, 0x79c00000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_39800000(pc, instr, 0x79800000);
    case OP_ldrsw:
        if ((enc = encode_opndsgen_38800400(pc, instr, 0xb8800400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38800c00(pc, instr, 0xb8800c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38a00800(pc, instr, 0xb8a00800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_39800000(pc, instr, 0xb9800000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_58000000(pc, instr, 0x98000000);
    case OP_ldset:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8203000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8203000);
    case OP_ldseta:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8a03000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a03000);
    case OP_ldsetab:
        return encode_opndsgen_38200000(pc, instr, 0x38a03000);
    case OP_ldsetah:
        return encode_opndsgen_38200000(pc, instr, 0x78a03000);
    case OP_ldsetal:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8e03000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e03000);
    case OP_ldsetalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e03000);
    case OP_ldsetalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e03000);
    case OP_ldsetb:
        return encode_opndsgen_38200000(pc, instr, 0x38203000);
    case OP_ldseth:
        return encode_opndsgen_38200000(pc, instr, 0x78203000);
    case OP_ldsetl:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8603000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8603000);
    case OP_ldsetlb:
        return encode_opndsgen_38200000(pc, instr, 0x38603000);
    case OP_ldsetlh:
        return encode_opndsgen_38200000(pc, instr, 0x78603000);
    case OP_ldsmax:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8204000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8204000);
    case OP_ldsmaxa:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8a04000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a04000);
    case OP_ldsmaxab:
        return encode_opndsgen_38200000(pc, instr, 0x38a04000);
    case OP_ldsmaxah:
        return encode_opndsgen_38200000(pc, instr, 0x78a04000);
    case OP_ldsmaxal:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8e04000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e04000);
    case OP_ldsmaxalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e04000);
    case OP_ldsmaxalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e04000);
    case OP_ldsmaxb:
        return encode_opndsgen_38200000(pc, instr, 0x38204000);
    case OP_ldsmaxh:
        return encode_opndsgen_38200000(pc, instr, 0x78204000);
    case OP_ldsmaxl:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8604000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8604000);
    case OP_ldsmaxlb:
        return encode_opndsgen_38200000(pc, instr, 0x38604000);
    case OP_ldsmaxlh:
        return encode_opndsgen_38200000(pc, instr, 0x78604000);
    case OP_ldsmin:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8205000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8205000);
    case OP_ldsmina:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8a05000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a05000);
    case OP_ldsminab:
        return encode_opndsgen_38200000(pc, instr, 0x38a05000);
    case OP_ldsminah:
        return encode_opndsgen_38200000(pc, instr, 0x78a05000);
    case OP_ldsminal:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8e05000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e05000);
    case OP_ldsminalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e05000);
    case OP_ldsminalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e05000);
    case OP_ldsminb:
        return encode_opndsgen_38200000(pc, instr, 0x38205000);
    case OP_ldsminh:
        return encode_opndsgen_38200000(pc, instr, 0x78205000);
    case OP_ldsminl:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8605000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8605000);
    case OP_ldsminlb:
        return encode_opndsgen_38200000(pc, instr, 0x38605000);
    case OP_ldsminlh:
        return encode_opndsgen_38200000(pc, instr, 0x78605000);
    case OP_ldtr:
        if ((enc = encode_opndsgen_38400000(pc, instr, 0xb8400800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_38800000(pc, instr, 0xf8400800);
    case OP_ldtrb:
        return encode_opndsgen_38400000(pc, instr, 0x38400800);
    case OP_ldtrh:
        return encode_opndsgen_38400000(pc, instr, 0x78400800);
    case OP_ldtrsb:
        if ((enc = encode_opndsgen_38400000(pc, instr, 0x38c00800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_38800000(pc, instr, 0x38800800);
    case OP_ldtrsh:
        if ((enc = encode_opndsgen_38400000(pc, instr, 0x78c00800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_38800000(pc, instr, 0x78800800);
    case OP_ldtrsw:
        return encode_opndsgen_38800000(pc, instr, 0xb8800800);
    case OP_ldumax:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8206000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8206000);
    case OP_ldumaxa:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8a06000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a06000);
    case OP_ldumaxab:
        return encode_opndsgen_38200000(pc, instr, 0x38a06000);
    case OP_ldumaxah:
        return encode_opndsgen_38200000(pc, instr, 0x78a06000);
    case OP_ldumaxal:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8e06000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e06000);
    case OP_ldumaxalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e06000);
    case OP_ldumaxalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e06000);
    case OP_ldumaxb:
        return encode_opndsgen_38200000(pc, instr, 0x38206000);
    case OP_ldumaxh:
        return encode_opndsgen_38200000(pc, instr, 0x78206000);
    case OP_ldumaxl:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8606000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8606000);
    case OP_ldumaxlb:
        return encode_opndsgen_38200000(pc, instr, 0x38606000);
    case OP_ldumaxlh:
        return encode_opndsgen_38200000(pc, instr, 0x78606000);
    case OP_ldumin:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8207000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8207000);
    case OP_ldumina:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8a07000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a07000);
    case OP_lduminab:
        return encode_opndsgen_38200000(pc, instr, 0x38a07000);
    case OP_lduminah:
        return encode_opndsgen_38200000(pc, instr, 0x78a07000);
    case OP_lduminal:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8e07000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e07000);
    case OP_lduminalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e07000);
    case OP_lduminalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e07000);
    case OP_lduminb:
        return encode_opndsgen_38200000(pc, instr, 0x38207000);
    case OP_lduminh:
        return encode_opndsgen_38200000(pc, instr, 0x78207000);
    case OP_lduminl:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8607000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8607000);
    case OP_lduminlb:
        return encode_opndsgen_38200000(pc, instr, 0x38607000);
    case OP_lduminlh:
        return encode_opndsgen_38200000(pc, instr, 0x78607000);
    case OP_ldur:
        if ((enc = encode_opndsgen_38400000(pc, instr, 0xb8400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38800000(pc, instr, 0xf8400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c400000(pc, instr, 0x3c400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3cc00000(pc, instr, 0x3cc00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_7c400000(pc, instr, 0x7c400000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_bc400000(pc, instr, 0xbc400000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_fc400000(pc, instr, 0xfc400000);
    case OP_ldurb:
        return encode_opndsgen_38400000(pc, instr, 0x38400000);
    case OP_ldurh:
        return encode_opndsgen_38400000(pc, instr, 0x78400000);
    case OP_ldursb:
        if ((enc = encode_opndsgen_38400000(pc, instr, 0x38c00000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_38800000(pc, instr, 0x38800000);
    case OP_ldursh:
        if ((enc = encode_opndsgen_38400000(pc, instr, 0x78c00000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_38800000(pc, instr, 0x78800000);
    case OP_ldursw:
        return encode_opndsgen_38800000(pc, instr, 0xb8800000);
    case OP_ldxp:
        if ((enc = encode_opndsgen_88600000(pc, instr, 0x88600000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8600000(pc, instr, 0xc8600000);
    case OP_ldxr:
        if ((enc = encode_opndsgen_08400000(pc, instr, 0x88400000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8400000(pc, instr, 0xc8400000);
    case OP_ldxrb:
        return encode_opndsgen_08400000(pc, instr, 0x08400000);
    case OP_ldxrh:
        return encode_opndsgen_08400000(pc, instr, 0x48400000);
    case OP_lslv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac02000);
    case OP_lsrv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac02400);
    case OP_madd:
        return encode_opndsgen_1b000000(pc, instr, 0x1b000000);
    case OP_movk:
        if ((enc = encode_opndsgen_72800000(pc, instr, 0x72800000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f2800000(pc, instr, 0xf2800000);
    case OP_movn:
        if ((enc = encode_opndsgen_12800000(pc, instr, 0x12800000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_92800000(pc, instr, 0x92800000);
    case OP_movz:
        if ((enc = encode_opndsgen_12800000(pc, instr, 0x52800000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_92800000(pc, instr, 0xd2800000);
    case OP_mrs:
        return encode_opndsgen_d5300000(pc, instr, 0xd5300000);
    case OP_msr:
        return encode_opnds_msr(pc, instr, 0xd5100000);
    case OP_msub:
        return encode_opndsgen_1b000000(pc, instr, 0x1b008000);
    case OP_nop:
        return encode_opndsgen_d503201f(pc, instr, 0xd503201f);
    case OP_orn:
        if ((enc = encode_opndsgen_0a000000(pc, instr, 0x2a200000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0xaa200000);
    case OP_orr:
        if ((enc = encode_opnds_logic_imm(pc, instr, 0x32000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0a000000(pc, instr, 0x2a000000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0a000000(pc, instr, 0xaa000000);
    case OP_prfm:
        if ((enc = encode_opndsgen_d8000000(pc, instr, 0xd8000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_f8a00800(pc, instr, 0xf8a00800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f9800000(pc, instr, 0xf9800000);
    case OP_prfum:
        return encode_opndsgen_f8800000(pc, instr, 0xf8800000);
    case OP_rbit:
        return encode_opndsgen_5ac00000(pc, instr, 0x5ac00000);
    case OP_ret:
        return encode_opndsgen_d61f0000(pc, instr, 0xd65f0000);
    case OP_rev:
        if ((enc = encode_opndsgen_5ac00800(pc, instr, 0x5ac00800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_dac00800(pc, instr, 0xdac00c00);
    case OP_rev16:
        return encode_opndsgen_5ac00000(pc, instr, 0x5ac00400);
    case OP_rev32:
        return encode_opndsgen_dac00800(pc, instr, 0xdac00800);
    case OP_rorv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac02c00);
    case OP_sbc:
        return encode_opndsgen_1a000000(pc, instr, 0x5a000000);
    case OP_sbcs:
        return encode_opndsgen_1a000000(pc, instr, 0x7a000000);
    case OP_sbfm:
        if ((enc = encode_opndsgen_13000000(pc, instr, 0x13000000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_93400000(pc, instr, 0x93400000);
    case OP_sdiv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac00c00);
    case OP_sev:
        return encode_opndsgen_d503201f(pc, instr, 0xd503209f);
    case OP_sevl:
        return encode_opndsgen_d503201f(pc, instr, 0xd50320bf);
    case OP_smaddl:
        return encode_opndsgen_9b200000(pc, instr, 0x9b200000);
    case OP_smc:
        return encode_opndsgen_d4000001(pc, instr, 0xd4000003);
    case OP_smsubl:
        return encode_opndsgen_9b200000(pc, instr, 0x9b208000);
    case OP_smulh:
        return encode_opndsgen_9b400000(pc, instr, 0x9b400000);
    case OP_st1:
        if ((enc = encode_opndsgen_0c000000(pc, instr, 0x0c002000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c004000(pc, instr, 0x0c006000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c007000(pc, instr, 0x0c007000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c008000(pc, instr, 0x0c00a000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c800000(pc, instr, 0x0c802000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c804000(pc, instr, 0x0c806000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c807000(pc, instr, 0x0c807000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c808000(pc, instr, 0x0c80a000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d000000(pc, instr, 0x0d000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d004000(pc, instr, 0x0d004000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d008000(pc, instr, 0x0d008000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d008400(pc, instr, 0x0d008400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d800000(pc, instr, 0x0d800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d804000(pc, instr, 0x0d804000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d808000(pc, instr, 0x0d808000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0d808400(pc, instr, 0x0d808400);
    case OP_st2:
        if ((enc = encode_opndsgen_0c008000(pc, instr, 0x0c008000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c808000(pc, instr, 0x0c808000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d200000(pc, instr, 0x0d200000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d204000(pc, instr, 0x0d204000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d208000(pc, instr, 0x0d208000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d208400(pc, instr, 0x0d208400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0da00000(pc, instr, 0x0da00000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0da04000(pc, instr, 0x0da04000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0da08000(pc, instr, 0x0da08000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0da08400(pc, instr, 0x0da08400);
    case OP_st3:
        if ((enc = encode_opndsgen_0c004000(pc, instr, 0x0c004000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c804000(pc, instr, 0x0c804000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d002000(pc, instr, 0x0d002000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d006000(pc, instr, 0x0d006000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d00a000(pc, instr, 0x0d00a000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d00a400(pc, instr, 0x0d00a400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d802000(pc, instr, 0x0d802000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d806000(pc, instr, 0x0d806000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d80a000(pc, instr, 0x0d80a000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0d80a400(pc, instr, 0x0d80a400);
    case OP_st4:
        if ((enc = encode_opndsgen_0c000000(pc, instr, 0x0c000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0c800000(pc, instr, 0x0c800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d202000(pc, instr, 0x0d202000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d206000(pc, instr, 0x0d206000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d20a000(pc, instr, 0x0d20a000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0d20a400(pc, instr, 0x0d20a400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0da02000(pc, instr, 0x0da02000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0da06000(pc, instr, 0x0da06000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0da0a000(pc, instr, 0x0da0a000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_0da0a400(pc, instr, 0x0da0a400);
    case OP_stlr:
        if ((enc = encode_opndsgen_08808000(pc, instr, 0x88808000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8808000(pc, instr, 0xc8808000);
    case OP_stlrb:
        return encode_opndsgen_08808000(pc, instr, 0x08808000);
    case OP_stlrh:
        return encode_opndsgen_08808000(pc, instr, 0x48808000);
    case OP_stlxp:
        if ((enc = encode_opndsgen_88200000(pc, instr, 0x88208000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8200000(pc, instr, 0xc8208000);
    case OP_stlxr:
        if ((enc = encode_opndsgen_08000000(pc, instr, 0x88008000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8000000(pc, instr, 0xc8008000);
    case OP_stlxrb:
        return encode_opndsgen_08000000(pc, instr, 0x08008000);
    case OP_stlxrh:
        return encode_opndsgen_08000000(pc, instr, 0x48008000);
    case OP_stnp:
        if ((enc = encode_opndsgen_28000000(pc, instr, 0x28000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_2c000000(pc, instr, 0x2c000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_6c000000(pc, instr, 0x6c000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_a8000000(pc, instr, 0xa8000000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_ac000000(pc, instr, 0xac000000);
    case OP_stp:
        if ((enc = encode_opndsgen_28000000(pc, instr, 0x29000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_28800000(pc, instr, 0x28800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_29800000(pc, instr, 0x29800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_2c000000(pc, instr, 0x2d000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_2c800000(pc, instr, 0x2c800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_2d800000(pc, instr, 0x2d800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_6c000000(pc, instr, 0x6d000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_6c800000(pc, instr, 0x6c800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_6d800000(pc, instr, 0x6d800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_a8000000(pc, instr, 0xa9000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_a8800000(pc, instr, 0xa8800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_a9800000(pc, instr, 0xa9800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_ac000000(pc, instr, 0xad000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_ac800000(pc, instr, 0xac800000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_ad800000(pc, instr, 0xad800000);
    case OP_str:
        if ((enc = encode_opndsgen_38000400(pc, instr, 0xb8000400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38000c00(pc, instr, 0xb8000c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38200800(pc, instr, 0xb8200800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_39000000(pc, instr, 0xb9000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c000400(pc, instr, 0x3c000400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c000c00(pc, instr, 0x3c000c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c200800(pc, instr, 0x3c200800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c800400(pc, instr, 0x3c800400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c800c00(pc, instr, 0x3c800c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3ca00800(pc, instr, 0x3ca00800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3d000000(pc, instr, 0x3d000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3d800000(pc, instr, 0x3d800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_7c000400(pc, instr, 0x7c000400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_7c000c00(pc, instr, 0x7c000c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_7c200800(pc, instr, 0x7c200800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_7d000000(pc, instr, 0x7d000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_bc000400(pc, instr, 0xbc000400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_bc000c00(pc, instr, 0xbc000c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_bc200800(pc, instr, 0xbc200800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_bd000000(pc, instr, 0xbd000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_f8000400(pc, instr, 0xf8000400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_f8000c00(pc, instr, 0xf8000c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_f8200800(pc, instr, 0xf8200800)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_f9000000(pc, instr, 0xf9000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_fc000400(pc, instr, 0xfc000400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_fc000c00(pc, instr, 0xfc000c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_fc200800(pc, instr, 0xfc200800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_fd000000(pc, instr, 0xfd000000);
    case OP_strb:
        if ((enc = encode_opndsgen_38000400(pc, instr, 0x38000400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38000c00(pc, instr, 0x38000c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38200800(pc, instr, 0x38200800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_39000000(pc, instr, 0x39000000);
    case OP_strh:
        if ((enc = encode_opndsgen_38000400(pc, instr, 0x78000400)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38000c00(pc, instr, 0x78000c00)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_38200800(pc, instr, 0x78200800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_39000000(pc, instr, 0x79000000);
    case OP_sttr:
        if ((enc = encode_opndsgen_38000000(pc, instr, 0xb8000800)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8000000(pc, instr, 0xf8000800);
    case OP_sttrb:
        return encode_opndsgen_38000000(pc, instr, 0x38000800);
    case OP_sttrh:
        return encode_opndsgen_38000000(pc, instr, 0x78000800);
    case OP_stur:
        if ((enc = encode_opndsgen_38000000(pc, instr, 0xb8000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c000000(pc, instr, 0x3c000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_3c800000(pc, instr, 0x3c800000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_7c000000(pc, instr, 0x7c000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_bc000000(pc, instr, 0xbc000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_f8000000(pc, instr, 0xf8000000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_fc000000(pc, instr, 0xfc000000);
    case OP_sturb:
        return encode_opndsgen_38000000(pc, instr, 0x38000000);
    case OP_sturh:
        return encode_opndsgen_38000000(pc, instr, 0x78000000);
    case OP_stxp:
        if ((enc = encode_opndsgen_88200000(pc, instr, 0x88200000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8200000(pc, instr, 0xc8200000);
    case OP_stxr:
        if ((enc = encode_opndsgen_08000000(pc, instr, 0x88000000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_c8000000(pc, instr, 0xc8000000);
    case OP_stxrb:
        return encode_opndsgen_08000000(pc, instr, 0x08000000);
    case OP_stxrh:
        return encode_opndsgen_08000000(pc, instr, 0x48000000);
    case OP_sub:
        if ((enc = encode_opndsgen_0b000000(pc, instr, 0x4b000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0b000000(pc, instr, 0xcb000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0b200000(pc, instr, 0x4b200000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_11000000(pc, instr, 0x51000000);
    case OP_subs:
        if ((enc = encode_opndsgen_0b000000(pc, instr, 0x6b000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_0b000000(pc, instr, 0xeb000000)) != ENCFAIL)
            return enc;
        if ((enc = encode_opndsgen_2b200000(pc, instr, 0x6b200000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_31000000(pc, instr, 0x71000000);
    case OP_svc:
        return encode_opndsgen_d4000001(pc, instr, 0xd4000001);
    case OP_swp:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8208000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8208000);
    case OP_swpa:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8a08000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8a08000);
    case OP_swpab:
        return encode_opndsgen_38200000(pc, instr, 0x38a08000);
    case OP_swpah:
        return encode_opndsgen_38200000(pc, instr, 0x78a08000);
    case OP_swpal:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8e08000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8e08000);
    case OP_swpalb:
        return encode_opndsgen_38200000(pc, instr, 0x38e08000);
    case OP_swpalh:
        return encode_opndsgen_38200000(pc, instr, 0x78e08000);
    case OP_swpb:
        return encode_opndsgen_38200000(pc, instr, 0x38208000);
    case OP_swph:
        return encode_opndsgen_38200000(pc, instr, 0x78208000);
    case OP_swpl:
        if ((enc = encode_opndsgen_38200000(pc, instr, 0xb8608000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_f8200000(pc, instr, 0xf8608000);
    case OP_swplb:
        return encode_opndsgen_38200000(pc, instr, 0x38608000);
    case OP_swplh:
        return encode_opndsgen_38200000(pc, instr, 0x78608000);
    case OP_sys:
        if ((enc = encode_opndsgen_d5080000(pc, instr, 0xd5080000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_d5280000(pc, instr, 0xd5280000);
    case OP_tbnz:
        return encode_opnds_tbz(pc, instr, 0x37000000);
    case OP_tbz:
        return encode_opnds_tbz(pc, instr, 0x36000000);
    case OP_ubfm:
        if ((enc = encode_opndsgen_13000000(pc, instr, 0x53000000)) != ENCFAIL)
            return enc;
        return encode_opndsgen_93400000(pc, instr, 0xd3400000);
    case OP_udiv:
        return encode_opndsgen_1a000000(pc, instr, 0x1ac00800);
    case OP_umaddl:
        return encode_opndsgen_9b200000(pc, instr, 0x9ba00000);
    case OP_umsubl:
        return encode_opndsgen_9b200000(pc, instr, 0x9ba08000);
    case OP_umulh:
        return encode_opndsgen_9b400000(pc, instr, 0x9bc00000);
    case OP_wfe:
        return encode_opndsgen_d503201f(pc, instr, 0xd503205f);
    case OP_wfi:
        return encode_opndsgen_d503201f(pc, instr, 0xd503207f);
    case OP_yield:
        return encode_opndsgen_d503201f(pc, instr, 0xd503203f);
    }
    return ENCFAIL;
}
