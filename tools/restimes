#!/usr/bin/perl

# **********************************************************
# Copyright (c) 2002-2003 VMware, Inc.  All rights reserved.
# **********************************************************

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of VMware, Inc. nor the names of its contributors may be
#   used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.

### restimes
### author: Derek Bruening   April 2001
###
### Produces a table summarizing times in a .res file

$usage = "Usage: $0 <.res file>\n";

if ($#ARGV < 0) {
    print $usage;
    exit;
}
$resfile = $ARGV[0];
open(FIND, "< $resfile") || die "Error running $resfile\n";

while (<FIND>) {
    chop;
    if ($_ =~ m|.+/([^/]+)|) {
        $bmark = $1;
        $elapsed = 0;
        $val{$bmark,$opt,$dset} = 0;
        $bm{$bmark} = 1;
    } elsif ($_ =~ /Elapsed: ([0-9]+):([0-9]+):([0-9\.]+)/) {
        # texec format
        $elapsed = $1*60 + $2 + $3/60.; # minutes
        $val{$bmark,$opt,$dset} += $elapsed;
    } elsif ($_ =~ /real\t([0-9]+)m([0-9\.]+)s/) {
        # /usr/bin/time simple format
        # XXX: what do hours look like?
        $elapsed = $1 + $2/60.; # minutes
        $val{$bmark,$opt,$dset} += $elapsed;
    } elsif ($_ =~ /(\d+):(\d+).(\d+)elapsed (\d+)%CPU/) {
        # /usr/bin/time and runstats compressed format
        # XXX: what do hours look like?
        $elapsed = $1 + $2/60.; # minutes
        $val{$bmark,$opt,$dset} += $elapsed;

    }
}
close(FIND);

print("Benchmark\tTime\tRSS\tVSz\t%CPU\n");
foreach $b (sort (keys %bm)) {
    printf("%10s\t%6.2f\t%6.2f\t%6.2f\t%6.2f\n",$b,
           $val{$b,"n","r"},$val{$b,"o","r"},
           $val{$b,"n","t"},$val{$b,"o","t"});
}

