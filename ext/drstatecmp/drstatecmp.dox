/* **********************************************************
 * Copyright (c) 2021 Google, Inc.   All rights reserved.
 * **********************************************************/

/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Google, Inc. nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL GOOGLE, INC. OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

/**
***************************************************************************
***************************************************************************
\page page_drstatecmp Machine State Comparison Library

The \p drstatecmp DynamoRIO Machine State Comparison Extension provides mechanisms
to enable systematic and exhaustive machine state comparisons across instrumentation
sequences. These comparisons will detect instrumentation-induced corruptions of the
application's machine state that would typically lead to obscure bugs.

 - \ref sec_drstatecmp_init
 - \ref sec_drstatecmp_checks
 - \ref sec_drstatecmp_instr_state_sharing
 - \ref sec_drstatecmp_machine_state_saved

\section sec_drstatecmp_init Setup

To use \p drstatecmp with your client simply include this line in your client's
\p CMakeLists.txt file:

\code use_DynamoRIO_extension(clientname drstatecmp) \endcode

That will automatically set up the include path and library dependence.

The initialization routine \p drstatecmp_init() must be called prior to any of
the other routines.

\section sec_drstatecmp_checks Checks

There are two types of checks depending on whether a basic block has any side-effects.

\subsection sec_drstatecmp_checks_side_effects_free Side-effect-free Basic Blocks

Side-effect-free basic blocks are duplicated and executed twice, once with the full
instrumentation sequence and once with no instrumentation except for a state comparison at
the end. Essentially, we check whether the machine state at the end of the basic block is
the same with and without instrumentation code. This check should catch any state
clobbering by instrumentation.

The side-effect-free basic blocks are duplicated at drmgr's app2app stage. The copy of each
such basic block is appended immediately after the original basic block. Labels are inserted
in the beginning of the original basic block (ORIG_BB) and its copy (COPY_BB) to allow
identification in later stages. The terminating instruction of the basic block (if any)
is only kept in the copy and is preceded by a TERM label. A jump to the TERM label is
inserted at the end the original basic block to skip the duplicated bb.

The insert instrumentation stage inserts the actual checks. First, the original basic block
is instrumented. In the beginning of the original basic block, the machine state is saved.
This state will be used for state restoration before the re-execution of the basic block.
At the end of the original block, code is inserted to save the state for later comparison
and restore the machine state to the state before executing this bb. This stage also removes
the previously inserted jump instr to the TERM label and let it fall through to the
instructions of the copy of the basic block. Then, the copy of the basic block is
instrumented. At the end of the copy, a clean call is inserted that compares the current
machine state with the machine state that was saved at the end of the original basic block.
Finally, all previously-inserted (from other passes) instrumentation instructions are
removed from the basic block copy, making it instrumentation-free and enabling
identification of various types of instrumentation clobering.

\subsection sec_drstatecmp_checks_side_effects Basic Blocks with Side Effects

Checking basic blocks with side effects is not yet implemented but this section serves
as a high-level design overview.

Basic blocks with side-effects cannot be executed twice (at least not without a lot of
extra complexity to monitor and restore memory state). In this case, the checks are
inserted throughout the basic block whenever needed taking into account the app
instructions, existing instrumentation, and the lazy restoration by drreg. As a result,
incomplete-decoder bugs and lazy-condition-ddreg bugs will not be detected.

Instructions with side effects include instructions that write to memory, interrupts,
and system calls. To avoid inter-procedural analysis, all function calls are
conservatively assumed to have side effects.

Some of the side effects could be handled in a way that enables re-execution of more
basic blocks. For example, system calls could be executed once in the original basic
block and then in the basic block copy the system call is just emulated by using
the return value seen in the first execution. Other side effects such as storing to
memory can be executed only once in cases where the stored value is not loaded
within the basic block. Memory could also be handled by saving and restoring the
memory state in addition to the machine state. Naturally, monitoring of the written
memory addresses is needed to limit the memory state size.


\section sec_drstatecmp_instr_state_sharing Instrumentation State Sharing

The instrumentation stages communicate through the user_data parameter. Space for this
data is allocated in thread-local storage in the app2app stage and deallocated at the
end of the insert instrumentation stage. The app2app stage specifies in the user_data
whether a basic block is side-effect free or not. The analysis stage is not used except
for passing over the user_data to the insert instrumentation stage. In the latter stage,
the user_data is also used to track when the instrumentation moves from the original
basic block to its copy.

\section sec_drstatecmp_machine_state_saved Machine States Saved

During execution, thread-local storage is used to keep two machine states for each
side-effect basic block. One is the state of the original basic block before its
execution (used for state restoration) and the other is the state of the original
basic block after its execution (used for state comparison).


*/
