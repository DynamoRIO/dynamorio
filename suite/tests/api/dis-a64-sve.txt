# **********************************************************
# Copyright (c) 2022 ARM Limited. All rights reserved.
# **********************************************************

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of ARM Limited nor the names of its contributors may be
#   used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL ARM LIMITED OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.

# Test data for DynamoRIO's AArch64 SVE encoder, decoder and disassembler.

# This file contains colon-separated fields that are used to
# test the decoder.

# The first field contains the hex encoding of the instruction and
# its operands.

# The second field is the disassembly of the first field and is not
# used by testing.

# The optional third field is the expected encoding of the instruction if the
# re-encoding differs from the initial encoding in the first field. This
# is usually set if the instruction has "soft bits" which are required
# to be ignored.

# The fourth field (or third if no expected encoding is present) is the
# disassembly that is expected to be produced by DynamoRIO. It is both case
# and white-space sensitive.

# Tests:
043e0362 : add z2.b, z27.b, z30.b                   : add    %z27.b %z30.b -> %z2.b
047e0362 : add z2.h, z27.h, z30.h                   : add    %z27.h %z30.h -> %z2.h
04be0362 : add z2.s, z27.s, z30.s                   : add    %z27.s %z30.s -> %z2.s
04fe0362 : add z2.d, z27.d, z30.d                   : add    %z27.d %z30.d -> %z2.d

041a06ff : and z31.b, p1/m, z31.b, z23.b            : and    %p1 %z31 %z23 $0x00 -> %z31
045a06ff : and z31.h, p1/m, z31.h, z23.h            : and    %p1 %z31 %z23 $0x01 -> %z31
049a06ff : and z31.s, p1/m, z31.s, z23.s            : and    %p1 %z31 %z23 $0x02 -> %z31
04da06ff : and z31.d, p1/m, z31.d, z23.d            : and    %p1 %z31 %z23 $0x03 -> %z31

041b0b02 : bic z2.b, p2/m, z2.b, z24.b              : bic    %p2 %z2 %z24 $0x00 -> %z2
045b0b02 : bic z2.h, p2/m, z2.h, z24.h              : bic    %p2 %z2 %z24 $0x01 -> %z2
049b0b02 : bic z2.s, p2/m, z2.s, z24.s              : bic    %p2 %z2 %z24 $0x02 -> %z2
04db0b02 : bic z2.d, p2/m, z2.d, z24.d              : bic    %p2 %z2 %z24 $0x03 -> %z2

0419105d : eor z29.b, p4/m, z29.b, z2.b             : eor    %p4 %z29 %z2 $0x00 -> %z29
0459105d : eor z29.h, p4/m, z29.h, z2.h             : eor    %p4 %z29 %z2 $0x01 -> %z29
0499105d : eor z29.s, p4/m, z29.s, z2.s             : eor    %p4 %z29 %z2 $0x02 -> %z29
04d9105d : eor z29.d, p4/m, z29.d, z2.d             : eor    %p4 %z29 %z2 $0x03 -> %z29

# MOVPRFX <Zd>, <Zn> (MOVPRFX-Z.Z-_)
0420bc00 : movprfx z0, z0                            : movprfx %z0 -> %z0
0420bc62 : movprfx z2, z3                            : movprfx %z3 -> %z2
0420bca4 : movprfx z4, z5                            : movprfx %z5 -> %z4
0420bce6 : movprfx z6, z7                            : movprfx %z7 -> %z6
0420bd28 : movprfx z8, z9                            : movprfx %z9 -> %z8
0420bd49 : movprfx z9, z10                           : movprfx %z10 -> %z9
0420bd8b : movprfx z11, z12                          : movprfx %z12 -> %z11
0420bdcd : movprfx z13, z14                          : movprfx %z14 -> %z13
0420be0f : movprfx z15, z16                          : movprfx %z16 -> %z15
0420be51 : movprfx z17, z18                          : movprfx %z18 -> %z17
0420be93 : movprfx z19, z20                          : movprfx %z20 -> %z19
0420bed5 : movprfx z21, z22                          : movprfx %z22 -> %z21
0420bef6 : movprfx z22, z23                          : movprfx %z23 -> %z22
0420bf38 : movprfx z24, z25                          : movprfx %z25 -> %z24
0420bf7a : movprfx z26, z27                          : movprfx %z27 -> %z26
0420bfde : movprfx z30, z30                          : movprfx %z30 -> %z30

04181da2 : orr z2.b, p7/m, z2.b, z13.b              : orr    %p7 %z2 %z13 $0x00 -> %z2
04581da2 : orr z2.h, p7/m, z2.h, z13.h              : orr    %p7 %z2 %z13 $0x01 -> %z2
04981da2 : orr z2.s, p7/m, z2.s, z13.s              : orr    %p7 %z2 %z13 $0x02 -> %z2
04d81da2 : orr z2.d, p7/m, z2.d, z13.d              : orr    %p7 %z2 %z13 $0x03 -> %z2

043719e4 : sqsub z4.b, z15.b, z23.b                 : sqsub  %z15 %z23 $0x00 -> %z4
047719e4 : sqsub z4.h, z15.h, z23.h                 : sqsub  %z15 %z23 $0x01 -> %z4
04b719e4 : sqsub z4.s, z15.s, z23.s                 : sqsub  %z15 %z23 $0x02 -> %z4
04f719e4 : sqsub z4.d, z15.d, z23.d                 : sqsub  %z15 %z23 $0x03 -> %z4

043d05a0 : sub z0.b, z13.b, z29.b                   : sub    %z13 %z29 $0x00 -> %z0
047d05a0 : sub z0.h, z13.h, z29.h                   : sub    %z13 %z29 $0x01 -> %z0
04bd05a0 : sub z0.s, z13.s, z29.s                   : sub    %z13 %z29 $0x02 -> %z0
04fd05a0 : sub z0.d, z13.d, z29.d                   : sub    %z13 %z29 $0x03 -> %z0

043417e2 : uqadd z2.b, z31.b, z20.b                 : uqadd  %z31 %z20 $0x00 -> %z2
047417e2 : uqadd z2.h, z31.h, z20.h                 : uqadd  %z31 %z20 $0x01 -> %z2
04b417e2 : uqadd z2.s, z31.s, z20.s                 : uqadd  %z31 %z20 $0x02 -> %z2
04f417e2 : uqadd z2.d, z31.d, z20.d                 : uqadd  %z31 %z20 $0x03 -> %z2

04281f42 : uqsub z2.b, z26.b, z8.b                  : uqsub  %z26 %z8 $0x00 -> %z2
04681f42 : uqsub z2.h, z26.h, z8.h                  : uqsub  %z26 %z8 $0x01 -> %z2
04a81f42 : uqsub z2.s, z26.s, z8.s                  : uqsub  %z26 %z8 $0x02 -> %z2
04e81f42 : uqsub z2.d, z26.d, z8.d                  : uqsub  %z26 %z8 $0x03 -> %z2

# ZIP2    <Zd>.Q, <Zn>.Q, <Zm>.Q (ZIP2-Z.ZZ-Q)
05a00400 : zip2 z0.q, z0.q, z0.q                     : zip2   %z0.q %z0.q -> %z0.q
05a40462 : zip2 z2.q, z3.q, z4.q                     : zip2   %z3.q %z4.q -> %z2.q
05a604a4 : zip2 z4.q, z5.q, z6.q                     : zip2   %z5.q %z6.q -> %z4.q
05a804e6 : zip2 z6.q, z7.q, z8.q                     : zip2   %z7.q %z8.q -> %z6.q
05aa0528 : zip2 z8.q, z9.q, z10.q                    : zip2   %z9.q %z10.q -> %z8.q
05ab0549 : zip2 z9.q, z10.q, z11.q                   : zip2   %z10.q %z11.q -> %z9.q
05ad058b : zip2 z11.q, z12.q, z13.q                  : zip2   %z12.q %z13.q -> %z11.q
05af05cd : zip2 z13.q, z14.q, z15.q                  : zip2   %z14.q %z15.q -> %z13.q
05b1060f : zip2 z15.q, z16.q, z17.q                  : zip2   %z16.q %z17.q -> %z15.q
05b30651 : zip2 z17.q, z18.q, z19.q                  : zip2   %z18.q %z19.q -> %z17.q
05b50693 : zip2 z19.q, z20.q, z21.q                  : zip2   %z20.q %z21.q -> %z19.q
05b706d5 : zip2 z21.q, z22.q, z23.q                  : zip2   %z22.q %z23.q -> %z21.q
05b806f6 : zip2 z22.q, z23.q, z24.q                  : zip2   %z23.q %z24.q -> %z22.q
05ba0738 : zip2 z24.q, z25.q, z26.q                  : zip2   %z25.q %z26.q -> %z24.q
05bc077a : zip2 z26.q, z27.q, z28.q                  : zip2   %z27.q %z28.q -> %z26.q
05be07de : zip2 z30.q, z30.q, z30.q                  : zip2   %z30.q %z30.q -> %z30.q

